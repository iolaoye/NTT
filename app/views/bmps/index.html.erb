<head>
  <script src="assets/gen_validatorv4.js" type="text/javascript"></script>
</head>
<%= form_for :bmp, :html => { :id => "bmpsForm" }, :url => save_bmps_bmps_path, method: :post do %>
  <div class="page-header">
    <h1><%= t('menu.bmps') %></h1>
  </div>
	<%= submit_tag t("submit.save"), name: "button", class: "btn btn-primary" %>
    <table class="table table-striped">
      <thead>
        <tr class='gvHeaderStyle'>
          <th><%= t('general.name')%></th>
          <th><%= t('general.select')%></th>
        </tr>
      </thead>

      <% @bmps.each do |bmp| %>
		<tbody>
			<tr>
        <% if I18n.locale.equal?(:en) %>
			     <td style="cursor: pointer" id=<%= "bmp#{bmp.bmpsublist_id}" %>><h4><%= Bmpsublist.find(bmp.bmpsublist_id).name %></h4></td>
        <% else %>
          <td style="cursor: pointer" id=<%= "bmp#{bmp.bmpsublist_id}" %>><h4><%= Bmpsublist.find(bmp.bmpsublist_id).spanish_name %></h4></td>
        <% end %>
        <% if bmp.id != nil %>
				<td><%= check_box_tag "select[#{bmp.bmpsublist_id}]", true, value="1"%></td>
			<% else %>
				<td><%= check_box_tag "select[#{bmp.bmpsublist_id}]" %></td>
			<% end %>
			</tr>
		</tbody>
		<tbody id=<%="#{bmp.bmpsublist_id}"%>>
			<% case bmp.bmpsublist_id %>
				<% when 1 %>
				  <tr>
					<td class="indent">
						<%= label :irrigation_id, t('bmp.irrigation')  %>
						<% if I18n.locale.equal?(:en) %>
						  <%= collection_select :bmp_ai, :irrigation_id, Irrigation.all, :id, :name, {:prompt => t('general.select') + " " + t('general.one'), :selected => bmp.irrigation_id}%>
						<% else %>
						  <%= collection_select :bmp_ai, :irrigation_id, Irrigation.all, :id, :spanish_name, {:prompt => t('general.select') + " " + t('general.one'), :selected => bmp.irrigation_id} %>
						<% end %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= label :water_stress_factor, t('bmp.water_stress_factor') + " " + t('bmp.zero_to_one') %>
						<%=bmp.water_stress_factor%>
						<%= text_field :bmp_ai, :water_stress_factor, :value => bmp.water_stress_factor %>
					</td>
				  </tr>
				  <tr>
				    <td class="field indent" id = "irrigation_efficiency" >
						<%= label :irrigation_efficiency, t('bmp.irrigation_efficiency') + " " + t('bmp.zero_to_one') %>
						<%= text_field :bmp_ai, :irrigation_efficiency, :value => bmp.irrigation_efficiency  %>
				    </td>
				  </tr>
				  <tr>
				    <td class="field indent" id = "frequency" >
						<%= label :days, t('bmp.irrigation_frequency') + " " + t('bmp.days_range') %>
						<%= text_field :bmp_ai, :days, :value => bmp.days %>
				    </td>
				  </tr>
				  <tr>
				    <td class="field indent" id = "maximum_single_application" >
						<%= label :days, t('bmp.maximum_single_application') + " " + t('bmp.zero_to_max') + " " + t('bmp.inches') %>
						<%= text_field :bmp_ai, :maximum_single_application, :value => bmp.maximum_single_application %>
				    </td>
				  </tr>
				  <tr>
				    <td class="field indent" id = "reservoir_area" style="display: none;">
						<%= label :days, t('bmp.reservoir_area') + " " + t('bmp.zero_to_max') %>
						<%= text_field :bmp_ai, :area, :value => bmp.area%>
				    </td>
				  </tr>
				<% when 2 %>
				  <tr>
					<td class="indent">
						<%= label :irrigation_id, t('bmp.irrigation') %>
						<% if I18n.locale.equal?(:en) %>
						  <%= collection_select :bmp_af, :irrigation_id, Irrigation.all, :id, :name, {:prompt => t('general.select') + " " + t('general.one'), :selected => bmp.irrigation_id} %>
						<% else %>
						  <%= collection_select :bmp_af, :irrigation_id, Irrigation.all, :id, :spanish_name, {:prompt => t('general.select') + " " + t('general.one'), :selected => bmp.irrigation_id} %>
						<% end %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= label :water_stress_factor, t('bmp.water_stress_factor') + " " + t('bmp.zero_to_one') %>
						<%= text_field :bmp_af, :water_stress_factor, :value => bmp.water_stress_factor %>
					</td>
				  </tr>
				  <tr>
				    <td class="field indent" id = "irrigation_efficiency" >
						<%= label :irrigation_efficiency, t('bmp.irrigation_efficiency') + " " + t('bmp.zero_to_one') %>
						<%= text_field :bmp_af, :irrigation_efficiency, :value => bmp.irrigation_efficiency %>
				    </td>
				  </tr>
				  <tr>
				    <td class="field indent" id = "frequency" >
						<%= label :days, t('bmp.irrigation_frequency') + " " + t('bmp.days_range') %>
						<%= text_field :bmp_af, :days, :value => bmp.days %>
				    </td>
				  </tr>
				  <tr>
				    <td class="field indent" id = "maximum_single_application" >
						<%= label :days, t('bmp.maximum_single_application') + " " + t('bmp.zero_to_max') + " " + t('bmp.inches') %>
						<%= text_field :bmp_af, :maximum_single_application, :value => bmp.maximum_single_application %>
				    </td>
				  </tr>
				<% when 3 %>
				  <tr>
					<td class="field indent" id = "depth" >
						<%= label :depth, t('bmp.depth') + " " + t('bmp.zero_to_max') + " " + t('bmp.ft') %>
						<%= text_field :bmp_td, :depth, :value => bmp.depth %>
					</td>
				  </tr>
				<% when 4 %>
				  <tr>
					<td class="indent">
						<%= t('bmp.width') + " " + t('bmp.ft') %>
						<%= text_field :bmp_ppnd, :width, :value => bmp.width %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.sides')  %>
						<%= text_field :bmp_ppnd, :sides, :value => bmp.sides %>
					</td>
				  </tr>
				<% when 5 %>
				  <tr>
					<td class="indent">
						<%= t('bmp.width') + " " + t('bmp.ft') %>
						<%= text_field :bmp_ppds, :width, :value => bmp.width %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.sides')  %>
						<%= text_field :bmp_ppds, :sides, :value => bmp.sides %>
					</td>
				  </tr>
				<% when 6 %>
				  <tr>
					<td class="indent">
						<%= label :area, t('bmp.reservoir_area') + " " + t('bmp.zero_to_max') + " " + t('bmp.acres') %>
						<%= text_field :bmp_ppde, :area, :value => bmp.area %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.width') + " " + t('bmp.ft') %>
						<%= text_field :bmp_ppde, :width, :value => bmp.width %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.sides')  %>
						<%= text_field :bmp_ppde, :sides, :value => bmp.sides %>
					</td>
				  </tr>
				<% when 7 %>
				  <tr>
					<td class="indent">
						<%= label :area, t('bmp.reservoir_area') + " " + t('bmp.zero_to_max') + " " + t('bmp.acres') %>
						<%= text_field :bmp_pptw, :area, :value => bmp.area %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.width') + " " + t('bmp.ft') %>
						<%= text_field :bmp_pptw, :width, :value => bmp.width %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.sides')  %>
						<%= text_field :bmp_pptw, :sides, :value => bmp.sides %>
					</td>
				  </tr>
				<% when 8 %>
				  <tr>
					<td class="field indent" id = "area" >
						<%= label :depth, t('bmp.reservoir_area') + " " + t('bmp.zero_to_max') + " " + t('bmp.acres') %>
						<%= text_field :bmp_wl, :area, :value => bmp.area %>
					</td>
				  </tr>
				<% when 9 %>
				  <tr>
					<td class="field indent" id = "fraction_control_by_pond" >
						<%= label :control, t('bmp.area_control') + " " + t('bmp.zero_to_max')  %>
						<%= text_field :bmp_pnd, :irrigation_efficiency, :value => bmp.irrigation_efficiency %>
					</td>
				  </tr>
				<% when 10 %>
				  <tr>
					<td class="indent">
						<%= label :depth, t('bmp.animals') + " " + t('bmp.zero_to_max')  %>
						<%= text_field :bmp_sf, :number_of_animals, :value => bmp.number_of_animals %>
					</td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :days, t('bmp.stream_fencing_frequency') + " " + t('bmp.days_range') %>
						<%= text_field :bmp_sf, :days, :value => bmp.days %>
				    </td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :hours, t('bmp.hours') + " " + t('bmp.hours_range') %>
						<%= text_field :bmp_sf, :hours, :value => bmp.hours %>
				    </td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :animal_id, t('bmp.animals') %>
						<% if I18n.locale.equal?(:en) %>
						  <%= collection_select :bmp_sf, :animal_id, Fertilizer.where(:animal => true, :status => true), :id, :name, {:prompt => t('general.select') + " " + t('general.one'), :required => true} %>
						<% else %>
						  <%= collection_select :bmp_sf, :animal_id, Fertilizer.where(:animal => true, :status => true), :id, :spanish_name, {:prompt => t('general.select') + " " + t('general.one'), :required => true} %>
						<% end %>
				    </td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :dry_manure, t('bmp.dry_manure') + " " + t('bmp.zero_to_max') + " " + t('bmp.lbs') %>
						<%= text_field :bmp_sf, :dry_manure, :value => bmp.dry_manure %>
				    </td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :no3_n, t('bmp.no3_n') + " " + t('bmp.zero_to_one') %>
						<%= text_field :bmp_sf, :no3_n, :value => bmp.no3_n %>
				    </td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :po4_p, t('bmp.po4_p') + " " + t('bmp.zero_to_one') %>
						<%= text_field :bmp_sf, :po4_p, :value => bmp.po4_p %>
				    </td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :org_n, t('bmp.org_n') + " " + t('bmp.zero_to_one') %>
						<%= text_field :bmp_sf, :org_n, :value => bmp.org_n %>
				    </td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :org_p, t('bmp.org_p') + " " + t('bmp.zero_to_one') %>
						<%= text_field :bmp_sf, :org_p, :value => bmp.org_p %>
				    </td>
				  </tr>
				<% when 11 %>
				  <tr>
					<td class="indent">
						<%= t('general.select') %>
						<%= check_box :bmp_sbs, :id, :value => bmp.id %>
					</td>
				  </tr>
				<% when 12 %>
				  <tr>
					<td class="indent">
						<%= t('general.area') + " " + t('bmp.acres') %>
						<%= text_field :bmp_rf, :area, :value => bmp.area %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.width') + " " + t('bmp.ft') %>
						<%= text_field :bmp_rf, :width, :value => bmp.width %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('general.area') + " " + t('bmp.grass_field_portion') + " " + t('bmp.quarter_to_three_fourths') %>
						<%= text_field :bmp_rf, :grass_field_portion, :value => bmp.grass_field_portion %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.slope_ratio_label') + " " + t('bmp.quarter_to_one') %>
						<%= text_field :bmp_rf, :buffer_slope_upland, :value => bmp.buffer_slope_upland %>
					</td>
				  </tr>
				<% when 13 %>
				  <tr>
					<td class="indent">
						<%= label :crop_id, t('operation.crop') %>
						<% if I18n.locale.equal?(:en) %>
						  <%= collection_select :bmp_fs, :crop_id, Crop.where(:type1 => "FS"), :id, :name, {:prompt => t('bmp.select_vege')} %>
						<% else %>
						  <%= collection_select :bmp_fs, :crop_id, Crop.where(:type1 => "FS"), :id, :spanish_name, {:prompt => t('bmp.select_vege')} %>
						<% end %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('general.area') + " " + t('bmp.acres') %>
						<%= text_field :bmp_fs, :area, :value => bmp.area %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.width') + " " + t('bmp.ft') %>
						<%= text_field :bmp_fs, :width, :value => bmp.width %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.slope_ratio_label') + " " + t('bmp.quarter_to_one') %>
						<%= text_field :bmp_fs, :buffer_slope_upland, :value => bmp.buffer_slope_upland %>
					</td>
				  </tr>
				<% when 14 %>
				  <tr>
					<td class="indent">
						<%= label :crop_id, t('operation.crop') %>
						<% if I18n.locale.equal?(:en) %>
						  <%= collection_select :bmp_ww, :crop_id, Crop.where(:type1 => "FS"), :id, :name, {:prompt => t('bmp.select_vege')} %>
						<% else %>
						  <%= collection_select :bmp_ww, :crop_id, Crop.where(:type1 => "FS"), :id, :spanish_name, {:prompt => t('bmp.select_vege')} %>
						<% end %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.width') + " " + t('bmp.ft') %>
						<%= text_field :bmp_ww, :width, :value => bmp.width %>
					</td>
				  </tr>
				<% when 15 %>
				  <tr>
					<td class="indent">
						<%= label :crop_id, t('operation.crop') %>
						<% if I18n.locale.equal?(:en) %>
						  <%= collection_select :bmp_cb, :crop_id, Crop.where(:type1 => "FS"), :id, :name, {:prompt => t('bmp.select_vege')} %>
						<% else %>
						  <%= collection_select :bmp_cb, :crop_id, Crop.where(:type1 => "FS"), :id, :spanish_name, {:prompt => t('bmp.select_vege')} %>
						<% end %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.buffer_width') + " " + t('bmp.ft') %>
						<%= text_field :bmp_cb, :width, :value => bmp.width %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.crop_width') + " " + t('bmp.ft') %>
						<%= text_field :bmp_cb, :crop_width, :value => bmp.crop_width %>
					</td>
				  </tr>
				<% when 16 %>
				  <tr>
					<td class="indent">
						<%= t('bmp.slope_reduction') + " " + t('bmp.percentage_range') %>
						<%= text_field :bmp_ll, :slope_reduction, :value => bmp.slope_reduction %>
					</td>
				  </tr>
				<% when 17 %>
				  <tr>
					<td class="indent">
						<%= t('general.select') %>
						<%= check_box :bmp_ts, :id, :value => bmp.id %>
					</td>
				  </tr>
				<% when 18 %>
				  <tr>
					<td class="indent">
						<%= t('general.select') %>
						<%= check_box :bmp_ac, :id, :value => bmp.id %>
					</td>
				  </tr>
				<% when 19 %>
				  <tr>
					<td class="indent">
						<%= t('general.select') %>
						<%= check_box :bmp_gc, :id, :value => bmp.id %>
					</td>
				  </tr>
				<% when 20 %>
				  <tr>
					<td class="indent">
						<%= t('general.select') %>
						<%= check_box :bmp_sa, :id, :value => bmp.id %>
					</td>
				  </tr>
			<% end %>
		</tbody>
	  <% end %>
    </table>
  </div>
<% end %>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
<script type="text/javascript">
    $(document).ready(function(){
      //declare validation variables for each BMP
      var validateBmpAi = new Validator("bmpsForm");
      var validateBmpAf = new Validator("bmpsForm");
      var validateBmpTd = new Validator("bmpsForm");
      var validateBmpPpnd = new Validator("bmpsForm");
      var validateBmpPpds = new Validator("bmpsForm");
      var validateBmpPpde = new Validator("bmpsForm");
      var validateBmpPptw = new Validator("bmpsForm");
      var validateBmpWl = new Validator("bmpsForm");
      var validateBmpPnd = new Validator("bmpsForm");
      var validateBmpSf = new Validator("bmpsForm");
      var validateBmpSbs = new Validator("bmpsForm");
      var validateBmpRf = new Validator("bmpsForm");
      var validateBmpFs = new Validator("bmpsForm");
      var validateBmpWw = new Validator("bmpsForm");
      var validateBmpCb = new Validator("bmpsForm");
      var validateBmpLl = new Validator("bmpsForm");
      var validateBmpTs = new Validator("bmpsForm");
      //hides all Bmps on page load
      for(i = 1; i < 21; i++) {
        $('#'+i).hide();
      }
      //show/hide bmps on click-'let' makes 'i' local to loop instead of global
      for(let i = 1; i < 21; i++) {
        if ($('#select_'+i).is(':checked')){
          $('#'+i).show();
        } else {
          $('#'+i).hide();
        }
        //gives all BMPs toggle(show/hide) functionality
        $("#bmp"+i).click(function(){
          $("#"+i).toggle();
        });
        //checking box will open/show BMP, unchecking hides & clears BMP info.
        $('#select_'+i).change(function () {
          if (!this.checked) { //unchecked
            $("tbody#"+i).hide();
            $("tbody#"+i + " input").each(function() {
              this.value="";
              $("tbody#"+i + " input").not(this).attr('checked', false);
              $("tbody#"+i + " select").val([]);
            });
          } else { //checkbox checked
            $("tbody#"+i).show();
            //add validations for inputs
            //filter strip area will be optional field
            if (i == 1) {
              validateBmpAf.clearAllValidations();
              var ai_inputs = $('[name^=bmp_ai]').valueOf();
              $('#bmp_ai_irrigation_id').change(function(){
                if ($('#bmp_ai_irrigation_id').val() == 8) {
                  validateBmpAi.addValidation(ai_inputs[5].name, "req", "Field missing in Autoirrigation.");
                }
              });
              for(n = 0; n < ai_inputs.length - 1; n++) {
                  validateBmpAi.addValidation(ai_inputs[n].name, "req", "Fields missing in Autoirrigation.");
              }
              validateBmpAi.addValidation(ai_inputs[1].name, "gt=0", "Input must be greater than 0.");
              validateBmpAi.addValidation(ai_inputs[1].name, "lt=1.01", "Input must be less than or equal to 1.00.");
              validateBmpAi.addValidation(ai_inputs[2].name, "gt=0", "Input must be greater than 0.");
              validateBmpAi.addValidation(ai_inputs[2].name, "lt=1.01", "Input must be less than or equal to 1.00.");
              validateBmpAi.addValidation(ai_inputs[3].name, "gt=0", "Input must be greater than 0.");
              validateBmpAi.addValidation(ai_inputs[3].name, "lt=366", "Input must be less than or equal to 365.");
              validateBmpAi.addValidation(ai_inputs[4].name, "gt=0", "Input must be greater than 0.");
              validateBmpAi.addValidation(ai_inputs[4].name, "lt=99999.01", "Input must be less than or equal to 99999.00.");
            } else if (i == 2) {
              validateBmpAi.clearAllValidations();
              var af_inputs = $('[name^=bmp_af]').valueOf();
              var af_name = af_inputs[1].valueOf().name;
              for(n = 0; n < af_inputs.length; n++) {
                validateBmpAf.addValidation(af_inputs[n].name, "req", "Fields missing in Autofertigation.");
              }
              validateBmpAi.addValidation(af_inputs[1].name, "gt=0", "Input must be greater than 0.");
              validateBmpAi.addValidation(af_inputs[1].name, "lte=1.00", "Input must be less than or equal to 1.00.");
              validateBmpAi.addValidation(af_inputs[2].name, "gt=0", "Input must be greater than 0.");
              validateBmpAi.addValidation(af_inputs[2].name, "lte=1.00", "Input must be less than or equal to 1.00.");
              validateBmpAi.addValidation(af_inputs[3].name, "gt=0", "Input must be greater than 0.");
              validateBmpAi.addValidation(af_inputs[3].name, "lte=365", "Input must be less than or equal to 365.");
              validateBmpAi.addValidation(af_inputs[4].name, "gt=0", "Input must be greater than 0.");
              validateBmpAi.addValidation(af_inputs[4].name, "lte=99999.00", "Input must be less than or equal to 99999.00.");
            } else if (i == 3) {
              var td_inputs = $('[name^=bmp_td]').valueOf();
              validateBmpTd.addValidation(td_inputs[0].name, "req", "Fields missing in Tile Drain.");
              validateBmpTd.addValidation(td_inputs[0].name, "gt=0", "Input must be greater than 0.");
              validateBmpTd.addValidation(td_inputs[0].name, "lte=99999.00", "Input must be less than or equal to 99999.00.");
            } else if (i == 4) {
              var ppnd_inputs = $('[name^=bmp_ppnd]').valueOf();
              validateBmpPpnd.addValidation(ppnd_inputs[0].name, "req", "Fields missing in Pads & Pipes");
              validateBmpPpnd.addValidation(ppnd_inputs[1].name, "req", "Fields missing in Pads & Pipes");
              validateBmpPpnd.addValidation(ppnd_inputs[0].name, "gt=0", "Width must be greater than 0.");
              validateBmpPpnd.addValidation(ppnd_inputs[1].name, "gt=0", "Sides must be more than 0.");
              validateBmpPpnd.addValidation(ppnd_inputs[1].name, "lte=4.00", "Sides must be less than or equal to 4.0.");
            } else if (i == 5) {
              var ppds_inputs = $('[name^=bmp_ppds]').valueOf();
              validateBmpPpds.addValidation(ppds_inputs[0].name, "req", "Fields missing in Pads & Pipes");
              validateBmpPpds.addValidation(ppds_inputs[1].name, "req", "Fields missing in Pads & Pipes");
              validateBmpPpds.addValidation(ppds_inputs[0].name, "gt=0", "Width must be greater than 0.");
              validateBmpPpds.addValidation(ppds_inputs[1].name, "gt=0", "Sides must be more than 0.");
              validateBmpPpds.addValidation(ppds_inputs[1].name, "lte=4.00", "Sides must be less than or equal to 4.0.");
            } else if (i == 6) {
              var ppde_inputs = $('[name^=bmp_ppde]').valueOf();
              validateBmpPpde.addValidation(ppnd_inputs[0].name, "req", "Fields missing in Pads & Pipes");
              validateBmpPpde.addValidation(ppnd_inputs[1].name, "req", "Fields missing in Pads & Pipes");
              validateBmpPpde.addValidation(ppnd_inputs[0].name, "gt=0", "Width must be greater than 0.");
              validateBmpPpde.addValidation(ppnd_inputs[1].name, "gt=0", "Sides must be more than 0.");
              validateBmpPpde.addValidation(ppnd_inputs[1].name, "lte=4.00", "Sides must be less than or equal to 4.0.");
            } else if (i == 7) {
              var pptw_inputs = $('[name^=bmp_pptw]').valueOf();
              validateBmpPptw.addValidation(pptw_inputs[0].name, "req", "Fields missing in Pads & Pipes");
              validateBmpPptw.addValidation(pptw_inputs[1].name, "req", "Fields missing in Pads & Pipes");
              validateBmpPptw.addValidation(pptw_inputs[0].name, "gt=0", "Width must be greater than 0.");
              validateBmpPptw.addValidation(pptw_inputs[1].name, "gt=0", "Sides must be more than 0.");
              validateBmpPptw.addValidation(pptw_inputs[1].name, "lte=4.00", "Sides must be less than or equal to 4.0.");
            } else if (i == 8) {
              var wl_inputs = $('[name^=bmp_wl]').valueOf();
              validateBmpWl.addValidation(wl_inputs[0].name, "req", "Reservoir Area input missing.");
              validateBmpWl.addValidation(wl_inputs[0].name, "gt=0", "Reservoir Area must be greater than 0.");
              validateBmpWl.addValidation(wl_inputs[0].name, "lte=99999.00", "Resevoir Area must be less than or equal to 99999.00.");
            } else if (i == 9) {
              var pnd_inputs = $('[name^=bmp_pnd]').valueOf();
              validateBmpPnd.addValidation(pnd_inputs[0].name, "req", "Input missing in Ponds.");
              validateBmpPnd.addValidation(pnd_inputs[0].name, "gt=0", "Input must be greater than 0.");
              validateBmpPnd.addValidation(pnd_inputs[0].name, "lte=99999.00", "Input must be less than or equal to 99999.00.");
            } else if (i == 10) {
              var sf_inputs = $('[name^=bmp_sf]').valueOf();
              for(n = 0; n < sf_inputs.length; n++) {
                validateBmpSf.addValidation(sf_inputs[n].name, "req", "Required field(s) missing in Stream Fencing.");
              }
              validateBmpSf.addValidation(sf_inputs[0].name, "gt=0", "Input must be greater than 0.");
              validateBmpSf.addValidation(sf_inputs[0].name, "lte=99999.00", "Input must be less than or equal to 99999.00.");
              validateBmpSf.addValidation(sf_inputs[1].name, "gt=0", "Input must be greater than 0.");
              validateBmpSf.addValidation(sf_inputs[1].name, "lte=365", "Input must be less than or equal to 365.");
              validateBmpSf.addValidation(sf_inputs[2].name, "gt=0", "Input must be greater than 0.");
              validateBmpSf.addValidation(sf_inputs[2].name, "lte=24.00", "Input must be less than or equal to 24.");
              validateBmpSf.addValidation(sf_inputs[4].name, "gt=0", "Input must be greater than 0.");
              validateBmpSf.addValidation(sf_inputs[4].name, "lte=99999.00", "Input must be less than or equal to 99999.00.");
              validateBmpSf.addValidation(sf_inputs[5].name, "gt=0", "Input must be greater than 0.");
              validateBmpSf.addValidation(sf_inputs[5].name, "lte=1.00", "Input must be less than or equal to 1.00.");
              validateBmpSf.addValidation(sf_inputs[6].name, "gt=0", "Input must be greater than 0.");
              validateBmpSf.addValidation(sf_inputs[6].name, "lte=1.00", "Input must be less than or equal to 99999.00.");
              validateBmpSf.addValidation(sf_inputs[7].name, "gt=0", "Input must be greater than 0.");
              validateBmpSf.addValidation(sf_inputs[7].name, "lte=1.00", "Input must be less than or equal to 99999.00.");
              validateBmpSf.addValidation(sf_inputs[8].name, "gt=0", "Input must be greater than 0.");
              validateBmpSf.addValidation(sf_inputs[8].name, "lte=1.00", "Input must be less than or equal to 99999.00.");
            } else if (i == 11) {
              var sbs_inputs = $('[name^=bmp_sbs]').valueOf();
              console.log(sbs_inputs[0].name); //problem with checkmark?
              validateBmpSbs.addValidation(sbs_inputs[0].name, "shouldselchk=on", "Checkbox within Steambank Stabilization must be checked.");
            } else if (i == 12) {
              validateBmpFs.clearAllValidations();
              validateBmpWw.clearAllValidations();
              validateBmpCb.clearAllValidations();
              var rf_inputs = $('[name^=bmp_rf]').valueOf();
              for(n = 0; n < rf_inputs.length; n++){
                validateBmpRf.addValidation(rf_inputs[n].name, "req", "Fields missing in Riparian Forest");
              }
              validateBmpRf.addValidation(rf_inputs[0].name, "gt=0", "Area acres must be greater than 0.");
              validateBmpRf.addValidation(rf_inputs[0].name, "lte=100000", "Area acres must be less than or equal 100000.");
              validateBmpRf.addValidation(rf_inputs[1].name, "gt=0", "Width ft must be greater than 0.");
              validateBmpRf.addValidation(rf_inputs[2].name, "gte=0.25", "Input must be greater than or equal to 0.25.");
              validateBmpRf.addValidation(rf_inputs[2].name, "lte=0.75", "Input must be less than or equal to 0.75.");
              validateBmpRf.addValidation(rf_inputs[3].name, "gte=0.25", "Input must be greater than or equal to 0.25.");
              validateBmpRf.addValidation(rf_inputs[3].name, "lte=1.00", "Input must be less than or equal to 1.0.");
            } else if (i == 13) {
              validateBmpRf.clearAllValidations();
              validateBmpWw.clearAllValidations();
              validateBmpCb.clearAllValidations();
              var fs_inputs = $('[name^=bmp_fs]').valueOf();
                for(n = 0; n < fs_inputs.length; n++){
                  if(n != 1)
                    validateBmpFs.addValidation(fs_inputs[n].name, "req", "Fields missing in Filter Strip");
                }
              validateBmpFs.addValidation(fs_inputs[1].name, "gt=0", "Area acres must be greater than 0.");
              validateBmpFs.addValidation(fs_inputs[1].name, "lte=100000", "Area acres must be less than or equal to 100000.");
              validateBmpFs.addValidation(fs_inputs[2].name, "gt=0", "Width must be greater than 0.");
              validateBmpFs.addValidation(fs_inputs[3].name, "gte=0.25", "Buffer slope ratio must be greater than or equal to 0.25.");
              validateBmpFs.addValidation(fs_inputs[3].name, "lte=1.00", "Buffer slope ratio must be less than or equal to 1.0.");
            } else if (i == 14) {
              validateBmpRf.clearAllValidations();
              validateBmpFs.clearAllValidations();
              validateBmpCb.clearAllValidations();
              var ww_inputs = $('[name^=bmp_ww]').valueOf();
              for(n = 0; n < ww_inputs.length; n++){
                  validateBmpWw.addValidation(ww_inputs[n].name, "req", "Fields missing in Waterway");
              }
              validateBmpWw.addValidation(ww_inputs[1].name, "gt=0", "Width must be greater than 0.");
            } else if (i == 15) {
              validateBmpRf.clearAllValidations();
              validateBmpFs.clearAllValidations();
              validateBmpWw.clearAllValidations()
              var cb_inputs = $('[name^=bmp_cb]').valueOf();
              for(n = 0; n < cb_inputs.length; n++){
                  validateBmpCb.addValidation(cb_inputs[n], "req", "Fields missing in Contour Buffer");
              }
              validateBmpCb.addValidation(cb_inputs[0].name, "gt=0", "Buffer width must be greater than 0.");
              validateBmpCb.addValidation(cb_inputs[1].name, "gt=0", "Crop width must be greater than 0.");
            } else if (i == 16) {
              var ll_inputs = $('[name^=bmp_ll]').valueOf();
              validateBmpLl.addValidation(ll_inputs[0].name, "req", "Slope reduction is a required field.");
              validateBmpLl.addValidation(ll_inputs[0].name, "gt=0", "Input must be more than 0.");
              validateBmpLl.addValidation(ll_inputs[0].name, "lte=100.00", "Input must be less than 100.");
            } else if (i == 17) {
              var ts_inputs = $('[name^=bmp_ts]').valueOf();
              validateBmpTs.addValidation(ts_inputs[0].name, "shouldselchk=on", "Checkbox within Terrace System must be checked.");
            }
            if (i == 1 && $('#select_2').is(':checked')) {
              if (prompt_user()) {
                validateBmpAf.clearAllValidations();
                validateBmpAi.addValidation(ai_name, "req", "Fields missing in Autoirrigation.");
                $("#select_2").prop('checked', false);
                $("tbody#2 input").val("");
                $("tbody#2 select").val([]);
              } else { confirm_check(i); }
            } else
            if (i == 2 && $('#select_1').is(':checked')) {
                if (prompt_user()) {
                  validateBmpAi.clearAllValidations();
                  validateBmpAf.addValidation(af_name, "req", "Fields missing in Autofertigation.");
                  $("#select_1").prop('checked', false);
                  $("tbody#1 input").val("");
                  $("tbody#1 select").val([]);
                } else { confirm_check(i); }
            } else if (i > 3 && i < 8) {
                if (i == 4 && ($('#select_5').is(':checked') || $('#select_6').is(':checked') || $('#select_7').is(':checked'))) {
                  if (prompt_user()) {
                    validateBmpPpds.clearAllValidations();
                    validateBmpPpde.clearAllValidations();
                    validateBmpPptw.clearAllValidations();
                    validateBmpPpnd.addValidation(ppnd_name, "req", "Fields missing in Pads & Pipes");
                    $("#select_5, #select_6, #select_7").prop('checked', false);
                    $("tbody#5 input, tbody#6 input, tbody#7 input").val("");
                  } else { confirm_check(i); }
                } else if (i == 5 && ($('#select_4').is(':checked') || $('#select_6').is(':checked') || $('#select_7').is(':checked'))) {
                    if (prompt_user()) {
                      validateBmpPpnd.clearAllValidations();
                      validateBmpPpde.clearAllValidations();
                      validateBmpPptw.clearAllValidations();
                      validateBmpPpds.addValidation(ppds_name, "req", "Fields missing in Pads & Pipes");
                      console.log(ppds_name);
                      $("#select_4, #select_6, #select_7").prop('checked', false);
                      $("tbody#4 input, tbody#6 input, tbody#7 input").val("");
                    } else { confirm_check(i); }
                } else if (i == 6 && ($('#select_4').is(':checked') || $('#select_5').is(':checked') || $('#select_7').is(':checked'))) {
                    if (prompt_user()) {
                      validateBmpPpnd.clearAllValidations();
                      validateBmpPpds.clearAllValidations();
                      validateBmpPptw.clearAllValidations();
                      validateBmpPpde.addValidation(ppds_name, "req", "Fields missing in Pads & Pipes");
                      $("#select_4, #select_5, #select_7").prop('checked', false);
                      $("tbody#4 input, tbody#5 input, tbody#7 input").val("");
                    } else { confirm_check(i); }
                } else if (i == 7 && ($('#select_4').is(':checked') || $('#select_5').is(':checked') || $('#select_6').is(':checked'))) {
                    if (prompt_user()) {
                      validateBmpPpnd.clearAllValidations();
                      validateBmpPpds.clearAllValidations();
                      validateBmpPpde.clearAllValidations();
                      validateBmpPptw.addValidation(ppds_name, "req", "Fields missing in Pads & Pipes");
                      $("#select_4, #select_5, #select_6").prop('checked', false);
                      $("tbody#4 input, tbody#5 input, tbody#6 input").val("");
                    } else { confirm_check(i); }
                }
            } else if (i > 11 && i < 16) {
                if (i == 12 && ($('#select_13').is(':checked') || $('#select_14').is(':checked') || $('#select_15').is(':checked'))) {
                  if (prompt_user()) {
                    validateBmpCb.clearAllValidations();
                    validateBmpWw.clearAllValidations();
                    validateBmpFs.clearAllValidations();
                    validateBmpRf.addValidation(rf_name, "req", "Fields missing in Riparian Forest Buffer.");
                    $("#select_13, #select_14, #select_15").prop('checked', false);
                    $("tbody#13 input, tbody#14 input, tbody#15 input").val("");
                    $("tbody#13 select, tbody#14 select, tbody#15 select").val([]);
                  } else { confirm_check(i); }
                } else if (i == 13 && ($('#select_12').is(':checked') || $('#select_14').is(':checked') || $('#select_15').is(':checked'))) {
                    if (prompt_user()) {
                      validateBmpCb.clearAllValidations();
                      validateBmpWw.clearAllValidations();
                      validateBmpRf.clearAllValidations();
                      validateBmpFs.addValidation(fs_name, "req", "Fields missing in Filter Strip.");
                      $("#select_12, #select_14, #select_15").prop('checked', false);
                      $("tbody#12 input, tbody#14 input, tbody#15 input").val("");
                      $("tbody#14 select, tbody#15 select").val([]);
                  } else { confirm_check(i); }
                } else if (i == 14 && ($('#select_12').is(':checked') || $('#select_13').is(':checked') || $('#select_15').is(':checked'))) {
                    if (prompt_user()) {
                      validateBmpCb.clearAllValidations();
                      validateBmpFs.clearAllValidations();
                      validateBmpRf.clearAllValidations();
                      validateBmpWw.addValidation(ww_name, "req", "Fields missing in Waterway.");
                      $("#select_12, #select_13, #select_15").prop('checked', false);
                      $("tbody#12 input, tbody#13 input, tbody#15 input").val("");
                      $("tbody#13 select, tbody#15 select").val([]);
                    } else { confirm_check(i); }
                } else if (i == 15 && ($('#select_12').is(':checked') || $('#select_13').is(':checked') || $('#select_14').is(':checked'))) {
                    if (prompt_user()) {
                      validateBmpRf.clearAllValidations();
                      validateBmpFs.clearAllValidations();
                      validateBmpWw.clearAllValidations();
                      validateBmpCb.addValidation(cb_name, "req", "Fields missing in Countour Buffer.");
                      $("#select_12, #select_13, #select_14").prop('checked', false);
                      $("tbody#12 input, tbody#13 input, tbody#14 input").val("");
                      $("tbody#13 select, tbody#14 select").val([]);
                    } else { confirm_check(i); }
                }
            }
          }
        });
      }
      function prompt_user() {
        var r = confirm("It appears you have a similar BMP already checked. Continuing will clear any input you may have had for the other BMP.");
        if (r == true) {
          return true;
        } else {
            return false;
        }
      }
      function confirm_check(i) {
        $('#select_'+i).prop('checked', false);
      }
      //hide reservoir field if irrigation != pads & pipes
      $('#bmp_ai_irrigation_id').change(function(){
        var tableValue = $('#bmp_ai_irrigation_id').val();
        if (tableValue == 8)
          $('#reservoir_area').show();
        else
          $('#reservoir_area').hide();
      });
    });
    //To Do:
    //if pads and pipes tailwater checked, autoirrigation must be checked too -> add this functionality
    //make Auto Irrigation/Fertigation one body with same inputs and radio button will allow user to choose between the two
    //when validating inputs also make sure to handle unchecking box
    //additionally, make error message translatable to spanish
</script>
