<head>
  <script src="assets/javascripts/gen_validatorv4.js" type="text/javascript"></script>
</head>
<%= form_for :bmp, :html => { :id => "bmpsForm" }, :url => save_bmps_project_field_scenario_bmps_path(@project, @field, @scenario), method: :post do %>
  <div class="page-header">
    <h1><%= t('menu.bmps') %></h1>
  </div>
  <div id="flash_messages">
    <% flash.each do |key, value|
      if value.class == String # regular flash notices, alerts, etc. will be strings
        value = [value]
      end
      value.each do |value| %>
        <%= content_tag(:p, value, :class => "flash #{key}") unless value.empty? %>
      <% end %>
    <% end %>
  </div>
  <%= submit_tag t("submit.save"), name: "button", class: "btn btn-primary" %>
  <%= link_to t('general.continue'), project_field_scenarios_path(@project, @field), :class => 'btn btn-success' %><br>
    <br>
      <table class="table table-striped">
      <thead>
        <tr class='gvHeaderStyle'>
          <th><%= t('general.name')%></th>
          <th><%= t('general.select')%></th>
        </tr>
      </thead>
      <% @bmps.each do |bmp| %>
		<tbody>
      <% if bmp.bmpsublist_id != 2 && bmp.bmpsublist_id != 11 %>
			<tr>
				<% if I18n.locale.equal?(:en) %>
					<td style="cursor: pointer" id=<%= "bmp#{bmp.bmpsublist_id}" %>><h4><%= Bmpsublist.find(bmp.bmpsublist_id).name %></h4></td>
				<% else %>
					<td style="cursor: pointer" id=<%= "bmp#{bmp.bmpsublist_id}" %>><h4><%= Bmpsublist.find(bmp.bmpsublist_id).spanish_name %></h4></td>
				<% end %>
				<% if bmp.id != nil %>
					<td><%= check_box_tag "select[#{bmp.bmpsublist_id}]", true, value="1"%></td>
				<% else %>
					<td><%= check_box_tag "select[#{bmp.bmpsublist_id}]" %></td>
				<% end %>
			</tr>
        <%end %>
		</tbody>
		<tbody id=<%="#{bmp.bmpsublist_id}"%>>
			<% case bmp.bmpsublist_id %>
				<% when 1 %>
          <tr>
            <td>
              <% case bmp.depth%>
                <% when 1 %>
                  <%= radio_button_tag :bmp_cb1, "1", true  %> <%= t('bmp.autoirrigation') %>
                  <%= radio_button_tag :bmp_cb1, "2"%> <%= t('bmp.autofertigation') %>
                <% when 2 %>
                  <%= radio_button_tag :bmp_cb1, "1" %> <%= t('bmp.autoirrigation') %>
                  <%= radio_button_tag :bmp_cb1, "2", true %> <%= t('bmp.autofertigation') %>
                <% else %>
                  <%= radio_button_tag :bmp_cb1, "1"%> <%= t('bmp.autoirrigation') %>
                    <%= radio_button_tag :bmp_cb1, "2" %> <%= t('bmp.autofertigation') %>
              <%end%>
            </td>
          </tr>
				  <tr>
					<td class="indent">
						<%= label :irrigation_id, t('bmp.irrigation')  %>
						<% if I18n.locale.equal?(:en) %>
						  <%= collection_select :bmp_ai, :irrigation_id, Irrigation.all, :id, :name, {:prompt => t('general.select') + " " + t('general.one'), :selected => bmp.irrigation_id}%>
						<% else %>
						  <%= collection_select :bmp_ai, :irrigation_id, Irrigation.all, :id, :spanish_name, {:prompt => t('general.select') + " " + t('general.one'), :selected => bmp.irrigation_id} %>
						<% end %>
					</td>
				  </tr>
          <tr>
            <td class="field indent" id = "frequency" >
              <%= label :days, t('bmp.irrigation_frequency') + " " + t('bmp.days_range') %>
              <%= text_field :bmp_ai, :days, :value => bmp.days %>
            </td>
          </tr>
          <tr>
					<td class="indent">
						<%= label :water_stress_factor, t('bmp.water_stress_factor') + " " + t('bmp.zero_to_one') %>
						<%=bmp.water_stress_factor%>
						<%= text_field :bmp_ai, :water_stress_factor, :value => bmp.water_stress_factor %>
					</td>
				  </tr>
				  <tr>
				    <td class="field indent" id = "irrigation_efficiency" >
						<%= label :irrigation_efficiency, t('bmp.irrigation_efficiency') + " " + t('bmp.zero_to_one') %>
						<%= text_field :bmp_ai, :irrigation_efficiency, :value => bmp.irrigation_efficiency  %>
				    </td>
				  </tr>
				  <tr>
				    <td class="field indent" id = "maximum_single_application" >
						<%= label :days, t('bmp.maximum_single_application') + " " + t('bmp.zero_to_max') + " " + t('bmp.inches') %>
						<%= text_field :bmp_ai, :maximum_single_application, :value => bmp.maximum_single_application %>
				    </td>
				  </tr>
				  <tr>
				    <td class="field indent" id = "reservoir_area" style="display: none;">
						<%= label :days, t('bmp.reservoir_area') + " " + t('bmp.zero_to_max') %>
						<%= text_field :bmp_ai, :area, :value => bmp.area%>
				    </td>
				  </tr>
				<% when 3 %>
				  <tr>
					<td class="field indent" id = "depth" >
						<%= label :depth, t('bmp.depth') + " " + t('bmp.zero_to_max') + " " + t('bmp.ft') %>
						<%= text_field :bmp_td, :depth, :value => bmp.depth %>
					</td>
				  </tr>
				<% when 4 %>
				  <tr>
					<td class="indent">
						<%= t('bmp.width') + " " + t('bmp.ft') %>
						<%= text_field :bmp_ppnd, :width, :value => bmp.width %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.sides')  %>
						<%= text_field :bmp_ppnd, :sides, :value => bmp.sides %>
					</td>
				  </tr>
				<% when 5 %>
				  <tr>
					<td class="indent">
						<%= t('bmp.width') + " " + t('bmp.ft') %>
						<%= text_field :bmp_ppds, :width, :value => bmp.width %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.sides')  %>
						<%= text_field :bmp_ppds, :sides, :value => bmp.sides %>
					</td>
				  </tr>
				<% when 6 %>
				  <tr>
					<td class="indent">
						<%= label :area, t('bmp.reservoir_area') + " " + t('bmp.zero_to_max') + " " + t('bmp.acres') %>
						<%= text_field :bmp_ppde, :area, :value => bmp.area %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.width') + " " + t('bmp.ft') %>
						<%= text_field :bmp_ppde, :width, :value => bmp.width %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.sides')  %>
						<%= text_field :bmp_ppde, :sides, :value => bmp.sides %>
					</td>
				  </tr>
				<% when 7 %>
				  <tr>
					<td class="indent">
						<%= label :area, t('bmp.reservoir_area') + " " + t('bmp.zero_to_max') + " " + t('bmp.acres') %>
						<%= text_field :bmp_pptw, :area, :value => bmp.area %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.width') + " " + t('bmp.ft') %>
						<%= text_field :bmp_pptw, :width, :value => bmp.width %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.sides')  %>
						<%= text_field :bmp_pptw, :sides, :value => bmp.sides %>
					</td>
				  </tr>
				<% when 8 %>
				  <tr>
					<td class="field indent" id = "area" >
						<%= label :depth, t('bmp.reservoir_area') + " " + t('bmp.zero_to_max') + " " + t('bmp.acres') %>
						<%= text_field :bmp_wl, :area, :value => bmp.area %>
					</td>
				  </tr>
				<% when 9 %>
				  <tr>
					<td class="field indent" id = "fraction_control_by_pond" >
						<%= label :control, t('bmp.area_control') + " " + t('bmp.zero_to_one')  %>
						<%= text_field :bmp_pnd, :irrigation_efficiency, :value => bmp.irrigation_efficiency %>
					</td>
				  </tr>
				<% when 10 %>
				  <tr>
					<td class="indent">
						<%= label :depth, t('bmp.animals') + " " + t('bmp.zero_to_max')  %>
						<%= text_field :bmp_sf, :number_of_animals, :value => bmp.number_of_animals %>
					</td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :days, t('bmp.stream_fencing_frequency') + " " + t('bmp.days_range') %>
						<%= text_field :bmp_sf, :days, :value => bmp.days %>
				    </td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :hours, t('bmp.hours') + " " + t('bmp.hours_range') %>
						<%= text_field :bmp_sf, :hours, :value => bmp.hours %>
				    </td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :animal_id, t('bmp.animals') %>
						<% if I18n.locale.equal?(:en) %>
						  <%= collection_select :bmp_sf, :animal_id, Fertilizer.where(:animal => true, :status => true), :id, :name, {:prompt => t('general.select') + " " + t('general.one'), :required => true, :selected => bmp.animal_id} %>
						<% else %>
						  <%= collection_select :bmp_sf, :animal_id, Fertilizer.where(:animal => true, :status => true), :id, :spanish_name, {:prompt => t('general.select') + " " + t('general.one'), :required => true, :selected => bmp.animal_id} %>
						<% end %>
				    </td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :dry_manure, t('bmp.dry_manure') + " " + t('bmp.zero_to_max') + " " + t('bmp.lbs') %>
						<%= text_field :bmp_sf, :dry_manure, :value => bmp.dry_manure %>
				    </td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :no3_n, t('bmp.no3_n') + " " + t('bmp.zero_to_one') %>
						<%= text_field :bmp_sf, :no3_n, :value => bmp.no3_n %>
				    </td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :po4_p, t('bmp.po4_p') + " " + t('bmp.zero_to_one') %>
						<%= text_field :bmp_sf, :po4_p, :value => bmp.po4_p %>
				    </td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :org_n, t('bmp.org_n') + " " + t('bmp.zero_to_one') %>
						<%= text_field :bmp_sf, :org_n, :value => bmp.org_n %>
				    </td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :org_p, t('bmp.org_p') + " " + t('bmp.zero_to_one') %>
						<%= text_field :bmp_sf, :org_p, :value => bmp.org_p %>
				    </td>
				  </tr>
        <!--<% when 11 %>
				  <tr>
					<td class="indent">
						<%= t('general.select') %>
						<% if bmp.id != nil %>
							<%= check_box :bmp_sbs, :id, checked: true %>
						<%else%>
							<%= check_box :bmp_sbs, :id, checked: false %>
						<%end%>
					</td>
        </tr> -->
				<% when 12 %>
				  <tr>
					<td class="indent">
						<%= t('general.area') + " " + t('bmp.acres') %>
						<%= text_field :bmp_rf, :area, :value => bmp.area %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.width') + " " + t('bmp.ft') %>
						<%= text_field :bmp_rf, :width, :value => bmp.width %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('general.area') + " " + t('bmp.grass_field_portion') + " " + t('bmp.quarter_to_three_fourths') %>
						<%= text_field :bmp_rf, :grass_field_portion, :value => bmp.grass_field_portion %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.slope_ratio_label') + " " + t('bmp.quarter_to_one') %>
						<%= text_field :bmp_rf, :buffer_slope_upland, :value => bmp.buffer_slope_upland %>
					</td>
				  </tr>
				<% when 13 %>
				  <tr>
					<td class="indent">
						<%= label :crop_id, t('operation.crop') %>
						<% if I18n.locale.equal?(:en) %>
						  <%= collection_select :bmp_fs, :crop_id, Crop.where(:type1 => "FS"), :id, :name, {:prompt => t('bmp.select_vege'), :selected => bmp.crop_id}%>
						<% else %>
						  <%= collection_select :bmp_fs, :crop_id, Crop.where(:type1 => "FS"), :id, :spanish_name, {:prompt => t('bmp.select_vege'), :selected => bmp.crop_id} %>
						<% end %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('general.area') + " " + t('bmp.acres') %>
						<%= text_field :bmp_fs, :area, :value => bmp.area %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.width') + " " + t('bmp.ft') %>
						<%= text_field :bmp_fs, :width, :value => bmp.width %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.slope_ratio_label') + " " + t('bmp.quarter_to_one') %>
						<%= text_field :bmp_fs, :buffer_slope_upland, :value => bmp.buffer_slope_upland %>
					</td>
				  </tr>
				<% when 14 %>
				  <tr>
					<td class="indent">
						<%= label :crop_id, t('operation.crop') %>
						<% if I18n.locale.equal?(:en) %>
						  <%= collection_select :bmp_ww, :crop_id, Crop.where(:type1 => "FS"), :id, :name, {:prompt => t('bmp.select_vege'), :selected => bmp.crop_id} %>
                <% else %>
						  <%= collection_select :bmp_ww, :crop_id, Crop.where(:type1 => "FS"), :id, :spanish_name, {:prompt => t('bmp.select_vege'), :selected => bmp.crop_id} %>
                <% end %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.width') + " " + t('bmp.ft') %>
						<%= text_field :bmp_ww, :width, :value => bmp.width %>
					</td>
				  </tr>
				<% when 15 %>
				  <tr>
					<td class="indent">
						<%= label :crop_id, t('operation.crop') %>
						<% if I18n.locale.equal?(:en) %>
						  <%= collection_select :bmp_cb, :crop_id, Crop.where(:type1 => "FS"), :id, :name, {:prompt => t('bmp.select_vege'), :selected => bmp.crop_id} %>
                <% else %>
						  <%= collection_select :bmp_cb, :crop_id, Crop.where(:type1 => "FS"), :id, :spanish_name, {:prompt => t('bmp.select_vege'), :selected => bmp.crop_id} %>
                <% end %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.buffer_width') + " " + t('bmp.ft') %>
						<%= text_field :bmp_cb, :width, :value => bmp.width %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.crop_width') + " " + t('bmp.ft') %>
						<%= text_field :bmp_cb, :crop_width, :value => bmp.crop_width %>
					</td>
				  </tr>
				<% when 16 %>
				  <tr>
					<td class="indent">
						<%= t('bmp.slope_reduction') + " " + t('bmp.percentage_range') %>
						<%= text_field :bmp_ll, :slope_reduction, :value => bmp.slope_reduction %>
					</td>
				  </tr>
				<% when 17 %>
				  <tr>
					<td class="indent">
						<%= t('general.select') %>
						<% if bmp.id != nil %>
							<%= check_box :bmp_ts, :id, checked: true %>
						<%else%>
							<%= check_box :bmp_ts, :id, checked: false %>
						<%end%>
					</td>
				  </tr>
				<% when 18 %>
				  <tr>
				    <td class="indent">
						<%= label :manure_control_id, t('bmp.manure_control') %>
						<% if I18n.locale.equal?(:en) %>
						  <%= collection_select :bmp_mc, :animal_id, ManureControl.all, :id, :name, {:prompt => t('general.select') + " " + t('general.one'), :required => true, :selected => bmp.animal_id} %>
						<% else %>
						  <%= collection_select :bmp_mc, :animal_id, ManureControl.all, :id, :spanish_name, {:prompt => t('general.select') + " " + t('general.one'), :required => true, :selected => bmp.animal_id} %>
						<% end %>
				    </td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :no3_n, t('bmp.no3_n') + " " + t('bmp.percentage_range') %>
						<%= text_field :bmp_mc, :no3_n, :value => bmp.no3_n %>
				    </td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :po4_p, t('bmp.po4_p') + " " + t('bmp.percentage_range') %>
						<%= text_field :bmp_mc, :po4_p, :value => bmp.po4_p %>
				    </td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :org_n, t('bmp.org_n') + " " + t('bmp.percentage_range') %>
						<%= text_field :bmp_mc, :org_n, :value => bmp.org_n %>
				    </td>
				  </tr>
				  <tr>
				    <td class="indent">
						<%= label :org_p, t('bmp.org_p') + " " + t('bmp.percentage_range') %>
						<%= text_field :bmp_mc, :org_p, :value => bmp.org_p %>
				    </td>
				  </tr>
        <% when 19 %>
          <tr>
            <th class="gvCellStyleTitle">
              <%= t('bmp.month')%>
            </th>
            <th class="gvCellStyleTitle">
              <%= t('bmp.max_temp')%>
            </th>
            <th class="gvCellStyleTitle">
              <%= t('bmp.min_temp')%>
            </th>
              <th class="gvCellStyleTitle">
                <%= t('bmp.precipitation')%>
              </th>
          </tr>

          <% @climates.each do |climate| %>
            <tr class="indent">
              <td style="text-align: center">
                <%= climate.month %>
              </td>
              <td class="gvCellStyleNumber">
                <%= number_field "bmp_cc", "max_temp" + climate.month.to_s, :value  => climate.max_temp %>
              </td>
              <td class="gvCellStyleNumber">
                <%= number_field "bmp_cc", "min_temp" + climate.month.to_s, :value => climate.min_temp  %>
              </td>
              <td class="gvCellStyleNumber">
                <%= number_field "bmp_cc", "precipitation" + climate.month.to_s, :value  => climate.precipitation %>
              </td>
            </tr>
          <% end %>

        <% when 20 %>
				  <tr>
					<td class="indent">
						<%= t('general.select') %>
						<%= check_box :bmp_ac, :id, :value => bmp.id %>
					</td>
				  </tr>
				<% when 21 %>
				  <tr>
					<td class="indent">
						<%= t('general.select') %>
						<%= check_box :bmp_gc, :id, :value => bmp.id %>
					</td>
				  </tr>
				<% when 22 %>
				  <tr>
					<td class="indent">
						<%= t('general.select') %>
						<%= check_box :bmp_sa, :id, :value => bmp.id %>
					</td>
				  </tr>
				<% when 23 %>
				  <tr>
					<td class="indent">
						<%= label :crop_id, t('operation.crop') %>
						<% if I18n.locale.equal?(:en) %>
						  <%= collection_select :bmp_sdg, :crop_id, Crop.where(:type1 => "FS"), :id, :name, {:prompt => t('bmp.select_vege'), :selected => bmp.crop_id}%>
						<% else %>
						  <%= collection_select :bmp_sdg, :crop_id, Crop.where(:type1 => "FS"), :id, :spanish_name, {:prompt => t('bmp.select_vege'), :selected => bmp.crop_id} %>
						<% end %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('general.area') + " " + t('bmp.acres') %>
						<%= text_field :bmp_sdg, :area, :value => bmp.area %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.width') + " " + t('bmp.ft') %>
						<%= text_field :bmp_sdg, :width, :value => bmp.width %>
					</td>
				  </tr>
				  <tr>
					<td class="indent">
						<%= t('bmp.slope_ratio_label') + " " + t('bmp.quarter_to_one') %>
						<%= text_field :bmp_sdg, :buffer_slope_upland, :value => bmp.buffer_slope_upland %>
					</td>
				  </tr>
			<% end %>
		</tbody>
	  <% end %>
    </table>
  </div>
<% end %>
<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
<script type="text/javascript">
    $(document).ready(function(){
      //declare validation variables for each BMP
      var validateBmpAi = new Validator("bmpsForm");
      var validateBmpAf = new Validator("bmpsForm");
      var validateBmpTd = new Validator("bmpsForm");
      var validateBmpPpnd = new Validator("bmpsForm");
      var validateBmpPpds = new Validator("bmpsForm");
      var validateBmpPpde = new Validator("bmpsForm");
      var validateBmpPptw = new Validator("bmpsForm");
      var validateBmpWl = new Validator("bmpsForm");
      var validateBmpPnd = new Validator("bmpsForm");
      var validateBmpSf = new Validator("bmpsForm");
      var validateBmpSbs = new Validator("bmpsForm");
      var validateBmpRf = new Validator("bmpsForm");
      var validateBmpFs = new Validator("bmpsForm");
      var validateBmpWw = new Validator("bmpsForm");
      var validateBmpCb = new Validator("bmpsForm");
      var validateBmpLl = new Validator("bmpsForm");
      var validateBmpTs = new Validator("bmpsForm");
      var validateBmpMc = new Validator("bmpsForm");
      var validateBmpCc = new Validator("bmpsForm");
      var validateBmpAc = new Validator("bmpsForm");
      var validateBmpGc = new Validator("bmpsForm");
      var validateBmpSa = new Validator("bmpsForm");
      var validateBmpSdg = new Validator("bmpsForm");
      //hides all Bmps on page load - (i < integer) integer = bmpsublist count
      for(i = 1; i < 24; i++) {
        $('#'+i).hide();
      }
      //show/hide bmps on click-'let' makes 'i' local to loop instead of global
      for(let i = 1; i < 24; i++) {
        if ($('#select_'+i).is(':checked')){
          $('#'+i).show();
        } else {
          $('#'+i).hide();
        }
        //gives all BMPs toggle(show/hide) functionality
        $("#bmp"+i).click(function(){
          $("#"+i).toggle();
        });
        //checking box will open/show BMP, unchecking hides & clears BMP info.
        $('#select_'+i).change(function () {
          if (!this.checked) { //unchecked
            $("tbody#"+i).hide();
            $("tbody#"+i + " input").each(function() {
              this.value="";
              $("tbody#"+i + " input").not(this).attr('checked', false);
              $("tbody#"+i + " select").val([]);
            });
            //removes validations when checkbox unchecked
            if (i == 1) {
              validateBmpAi.clearAllValidations();
            } else if (i == 2) {
                validateBmpAf.clearAllValidations();
            } else if (i == 3) {
                validateBmpTd.clearAllValidations();
            } else if (i == 4) {
                validateBmpPpnd.clearAllValidations();
            } else if (i == 5) {
                validateBmpPpds.clearAllValidations();
            } else if (i == 6) {
                validateBmpPpde.clearAllValidations();
            } else if (i == 7) {
                validateBmpPptw.clearAllValidations();
            } else if (i == 8) {
                validateBmpWl.clearAllValidations();
            } else if (i == 9) {
                validateBmpPnd.clearAllValidations();
            } else if (i == 10) {
                validateBmpSf.clearAllValidations();
            } else if (i == 11) {
                validateBmpSbs.clearAllValidations();
            } else if (i == 12) {
                validateBmpRf.clearAllValidations();
            } else if (i == 13) {
                validateBmpFs.clearAllValidations();
            } else if (i == 14) {
                validateBmpWw.clearAllValidations();
            } else if (i == 15) {
                validateBmpCb.clearAllValidations();
                validationsBmpCb();
            } else if (i == 16) {
                validateBmpLl.clearAllValidations();
            } else if (i == 17) {
                validateBmpTs.clearAllValidations();
            } else if (i == 18) {
                validateBmpMc.clearAllValidations();
            } else if (i == 19) {
                validateBmpCc.clearAllValidations();
            } else if (i == 20) {
                validateBmpAc.clearAllValidations();
            } else if (i == 21) {
                validateBmpGc.clearAllValidations();
            } else if (i == 22) {
                validateBmpSa.clearAllValidations();
            } else if (i == 23) {
                validateBmpSdg.clearAllValidations();
            }
          } else { //checkbox checked
            $("tbody#"+i).show();
            //add validations for inputs when checkbox checked
            if (i == 1) {
              validationsBmpAi();
            } else if (i == 2) {
                validationsBmpAf();
            } else if (i == 3) {
                validationsBmpTd();
            } else if (i == 4) {
                validationsBmpPpnd();
            } else if (i == 5) {
                validationsBmpPpds();
            } else if (i == 6) {
                validationsBmpPpde();
            } else if (i == 7) {
                validationsBmpPptw();
            } else if (i == 8) {
                validationsBmpWl();
            } else if (i == 9) {
                validationsBmpPnd();
            } else if (i == 10) {
                validationsBmpSf();
            } else if (i == 11) {
                validationsBmpSbs();
            } else if (i == 12) {
                validationsBmpRf();
            } else if (i == 13) {
                validationsBmpFs();
            } else if (i == 14) {
                validationsBmpWw();
            } else if (i == 15) {
                validationsBmpCb();
            } else if (i == 16) {
                validationsBmpLl();
            } else if (i == 17) {
                validationsBmpTs();
            } else if (i == 18) {
                validationsBmpMc();
            } else if (i == 19) {
                validationsBmpCc();
            } else if (i == 20) {
                validationsBmpAc();
            } else if (i == 21) {
                validationsBmpGc();
            } else if (i == 22) {
                validationsBmpSa();
            } else if (i == 23) {
                validationsBmpSdg();
            }
            if (i == 1 && $('#select_2').is(':checked')) {
              if (prompt_user()) {
                validationsBmpAi(0);
              } else { confirm_check(i); }
            } else if (i == 2 && $('#select_1').is(':checked')) { //unused functionality as checkbox 2 does not appear
                if (prompt_user()) {
                  validationsBmpAf(0);
                } else { confirm_check(i); }
            } else if (i > 3 && i < 8) {
                if (i == 4 && ($('#select_5').is(':checked') || $('#select_6').is(':checked') || $('#select_7').is(':checked'))) {
                  if (prompt_user()) {
                    validationsBmpPpnd(0);
                  } else { confirm_check(i); }
                } else if (i == 5 && ($('#select_4').is(':checked') || $('#select_6').is(':checked') || $('#select_7').is(':checked'))) {
                    if (prompt_user()) {
                      validationsBmpPpds(0);
                    } else { confirm_check(i); }
                } else if (i == 6 && ($('#select_4').is(':checked') || $('#select_5').is(':checked') || $('#select_7').is(':checked'))) {
                    if (prompt_user()) {
                      validationsBmpPpde(0);
                    } else { confirm_check(i); }
                } else if (i == 7 && ($('#select_4').is(':checked') || $('#select_5').is(':checked') || $('#select_6').is(':checked'))) {
                    if (prompt_user()) {
                      validationsBmpPptw(0);
                    } else { confirm_check(i); }
                }
            } else if (i > 11 && i < 16) {
                if (i == 12 && ($('#select_13').is(':checked') || $('#select_14').is(':checked') || $('#select_15').is(':checked'))) {
                  if (prompt_user()) {
                    validationsBmpRf(0);
                  } else { confirm_check(i); }
                } else if (i == 13 && ($('#select_12').is(':checked') || $('#select_14').is(':checked') || $('#select_15').is(':checked'))) {
                    if (prompt_user()) {
                      validationsBmpFs(0);
                  } else { confirm_check(i); }
                } else if (i == 14 && ($('#select_12').is(':checked') || $('#select_13').is(':checked') || $('#select_15').is(':checked'))) {
                    if (prompt_user()) {
                      validationsBmpWw(0);
                    } else { confirm_check(i); }
                } else if (i == 15 && ($('#select_12').is(':checked') || $('#select_13').is(':checked') || $('#select_14').is(':checked'))) {
                    if (prompt_user()) {
                      validationsBmpCb(0);
                    } else { confirm_check(i); }
                }
            }
          }
        });
      }
      function prompt_user() {
        var r = confirm("It appears you have a similar BMP already checked. Continuing will clear any input you may have had for the other BMP.");
        if (r == true) {
          return true;
        } else {
            return false;
        }
      }
      function confirm_check(i) {
        $('#select_'+i).prop('checked', false);
        $('#'+i).hide();
      }
      //hide reservoir field if irrigation != pads & pipes
      $('#bmp_ai_irrigation_id').change(function(){
        var tableValue = $('#bmp_ai_irrigation_id').val();
        if (tableValue == 8)
          $('#reservoir_area').show();
        else
          $('#reservoir_area').hide();
      });
      function validationsBmpAi(i) {
        var ai_inputs = $('[name^=bmp_ai]').valueOf();
        if(i == 0) {
          validateBmpAf.clearAllValidations();
          $("#select_2").prop('checked', false);
          $("tbody#2 input").val("");
          $("tbody#2 select").val([]);
        }
        $('#bmp_ai_irrigation_id').change(function(){
          if ($('#bmp_ai_irrigation_id').val() == 8) {
            validateBmpAi.addValidation(ai_inputs[5].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.auto.header") %>');
          }
        });
        for(n = 0; n < ai_inputs.length - 1; n++) {
            validateBmpAi.addValidation(ai_inputs[n].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.auto.header") %>');
        }
        validateBmpAi.addValidation("bmp_cb1", "selone", "A selection is required.");
        validateBmpAi.addValidation(ai_inputs[1].name, "gt=0", '<%= t("managepage.bmpdesc.auto.header") %>' + " " + '<%= t("pdf.irrigation_frequency") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpAi.addValidation(ai_inputs[1].name, "lte=365", '<%= t("managepage.bmpdesc.auto.header") %>' + " " + '<%= t("pdf.irrigation_frequency") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 365");
        validateBmpAi.addValidation(ai_inputs[2].name, "gt=0", '<%= t("managepage.bmpdesc.auto.header") %>' + " " + '<%= t("pdf.water_stress_factor") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpAi.addValidation(ai_inputs[2].name, "lte=1.00", '<%= t("managepage.bmpdesc.auto.header") %>' + " " + '<%= t("pdf.water_stress_factor") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 1.00");
        validateBmpAi.addValidation(ai_inputs[3].name, "gt=0", '<%= t("managepage.bmpdesc.auto.header") %>' + " " + '<%= t("pdf.irrigation_efficiency") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpAi.addValidation(ai_inputs[3].name, "lte=1.00", '<%= t("managepage.bmpdesc.auto.header") %>' + " " + '<%= t("pdf.irrigation_efficiency") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 1.00");
        validateBmpAi.addValidation(ai_inputs[4].name, "gt=0", '<%= t("managepage.bmpdesc.auto.header") %>' + " " + '<%= t("pdf.max_single_application") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpAi.addValidation(ai_inputs[4].name, "lte=99999.00", '<%= t("managepage.bmpdesc.auto.header") %>' + " " + '<%= t("pdf.max_single_application") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 99999.00");
      }
      function validationsBmpAf(i) { //unused/unreferenced function - remove?
        if (($('#select_7').is(':checked'))) {
          if(promptMsg("Tailwater Irrigation is currently checked and requires Autoirrigation to be checked. " +
                       "Continuing will clear any data you may have for Tailwater Irrigation and Autoirrigation.")){
            validateBmpAi.clearAllValidations();
            validateBmpPptw.clearAllValidations();
            $("#select_1").prop('checked', false);
            $("#select_7").prop('checked', false);
            $("tbody#1 input").val("");
            $("tbody#1 select").val([]);
            $("tbody#7 input").val("");
          } else {
            confirm_check(2);
          }
        }
        var af_inputs = $('[name^=bmp_af]').valueOf();
        if(i == 0) {
          validateBmpAi.clearAllValidations();
          $("#select_1").prop('checked', false);
          $("tbody#1 input").val("");
          $("tbody#1 select").val([]);
        }
        for(n = 0; n < af_inputs.length; n++) {
          validateBmpAf.addValidation(af_inputs[n].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.auto.header") %>');
        }
        validateBmpAf.addValidation(af_inputs[1].name, "gt=0", '<%= t("validate.input_greater") %>' + " 0");
        validateBmpAf.addValidation(af_inputs[1].name, "lte=1.00", '<%= t("validate.input_lssequal") %>' + " 1.00");
        validateBmpAf.addValidation(af_inputs[2].name, "gt=0", '<%= t("validate.input_greater") %>' + " 0");
        validateBmpAf.addValidation(af_inputs[2].name, "lte=1.00", '<%= t("validate.input_lessequal") %>' + " 1.00");
        validateBmpAf.addValidation(af_inputs[3].name, "gt=0", '<%= t("validate.input_greater") %>' + " 0");
        validateBmpAf.addValidation(af_inputs[3].name, "lte=365", '<%= t("validate.input_lessequal") %>' + " 365");
        validateBmpAf.addValidation(af_inputs[4].name, "gt=0", '<%= t("validate.input_greater") %>' + " 0");
        validateBmpAf.addValidation(af_inputs[4].name, "lte=99999.00", '<%= t("validate.input_lessequal") %>' + " 99999.00");
      }
      function validationsBmpTd() {
        var td_inputs = $('[name^=bmp_td]').valueOf();
        validateBmpTd.addValidation(td_inputs[0].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.drainsystem.tile.header") %>');
        validateBmpTd.addValidation(td_inputs[0].name, "gt=0", '<%= t("managepage.bmpdesc.drainsystem.tile.header") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpTd.addValidation(td_inputs[0].name, "lte=99999.00", '<%= t("managepage.bmpdesc.drainsystem.tile.header") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 99999.00");
      }
      function validationsBmpPpnd(i) {
        var ppnd_inputs = $('[name^=bmp_ppnd]').valueOf();
        if(i == 0) {
          validateBmpPpds.clearAllValidations();
          validateBmpPpde.clearAllValidations();
          validateBmpPptw.clearAllValidations();
          $("#select_5, #select_6, #select_7").prop('checked', false);
          $("tbody#5 input, tbody#6 input, tbody#7 input").val("");
        }
        validateBmpPpnd.addValidation(ppnd_inputs[0].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.drainsystem.ppnoditch.header") %>');
        validateBmpPpnd.addValidation(ppnd_inputs[1].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.drainsystem.ppnoditch.header") %>');
        validateBmpPpnd.addValidation(ppnd_inputs[0].name, "gt=0", '<%= t("managepage.bmpdesc.drainsystem.ppnoditch.header") %>' +  " " + '<%= t("bmp.width") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpPpnd.addValidation(ppnd_inputs[1].name, "gt=0", '<%= t("managepage.bmpdesc.drainsystem.ppnoditch.header") %>' +  " " + '<%= t("bmp.sides") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpPpnd.addValidation(ppnd_inputs[1].name, "lte=4.00", '<%= t("managepage.bmpdesc.drainsystem.ppnoditch.header") %>' +  " " + '<%= t("bmp.sides") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 4.00");
      }
      function validationsBmpPpds(i) {
        var ppds_inputs = $('[name^=bmp_ppds]').valueOf();
        if (i == 0) {
          validateBmpPpnd.clearAllValidations();
          validateBmpPpde.clearAllValidations();
          validateBmpPptw.clearAllValidations();
          $("#select_4, #select_6, #select_7").prop('checked', false);
          $("tbody#4 input, tbody#6 input, tbody#7 input").val("");
        }
        validateBmpPpds.addValidation(ppds_inputs[0].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.drainsystem.pp2stage.header") %>');
        validateBmpPpds.addValidation(ppds_inputs[1].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.drainsystem.pp2stage.header") %>');
        validateBmpPpds.addValidation(ppds_inputs[0].name, "gt=0", '<%= t("managepage.bmpdesc.drainsystem.pp2stage.header") %>' + " " + '<%= t("bmp.width") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpPpds.addValidation(ppds_inputs[1].name, "gt=0", '<%= t("managepage.bmpdesc.drainsystem.pp2stage.header") %>' + " " + '<%= t("bmp.sides") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpPpds.addValidation(ppds_inputs[1].name, "lte=4.00", '<%= t("managepage.bmpdesc.drainsystem.pp2stage.header") %>' + " " + '<%= t("bmp.sides") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 4");
      }
      function validationsBmpPpde(i) {
        var ppde_inputs = $('[name^=bmp_ppde]').valueOf();
        if (i == 0) {
          validateBmpPpnd.clearAllValidations();
          validateBmpPpds.clearAllValidations();
          validateBmpPptw.clearAllValidations();
          $("#select_4, #select_5, #select_7").prop('checked', false);
          $("tbody#4 input, tbody#5 input, tbody#7 input").val("");
        }
        validateBmpPpde.addValidation(ppde_inputs[0].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.drainsystem.ppreservoir.header") %>');
        validateBmpPpde.addValidation(ppde_inputs[1].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.drainsystem.ppreservoir.header") %>');
        validateBmpPpde.addValidation(ppde_inputs[2].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.drainsystem.ppreservoir.header") %>');
        validateBmpPpde.addValidation(ppde_inputs[1].name, "gt=0", '<%= t("managepage.bmpdesc.drainsystem.ppreservoir.header") %>' + " " + '<%= t("bmp.reservoir_area") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpPpde.addValidation(ppde_inputs[2].name, "lte=99999", '<%= t("managepage.bmpdesc.drainsystem.ppreservoir.header") %>' + " " + '<%= t("bmp.reservoir_area") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 99999.00");
        validateBmpPpde.addValidation(ppde_inputs[1].name, "gt=0", '<%= t("managepage.bmpdesc.drainsystem.ppreservoir.header") %>' + " " + '<%= t("bmp.width") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpPpde.addValidation(ppde_inputs[2].name, "gt=0", '<%= t("managepage.bmpdesc.drainsystem.ppreservoir.header") %>' + " " + '<%= t("bmp.sides") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpPpde.addValidation(ppde_inputs[2].name, "lte=4", '<%= t("managepage.bmpdesc.drainsystem.ppreservoir.header") %>' + " " + '<%= t("bmp.sides") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 4");
      }
      function validationsBmpPptw(i) {
        var pptw_inputs = $('[name^=bmp_pptw]').valueOf();
        if (i == 0) {
          validateBmpPpnd.clearAllValidations();
          validateBmpPpds.clearAllValidations();
          validateBmpPpde.clearAllValidations();
          $("#select_4, #select_5, #select_6").prop('checked', false);
          $("tbody#4 input, tbody#5 input, tbody#6 input").val("");
        }
        if (promptMsg("This BMP requires Autoirrigation. Continuing will clear any data you may have entered in Autofertigation.")) {
          validationsBmpAi(0);
          $('#select_1').prop('checked', true);
          $('#1').show();
          validateBmpPptw.addValidation(pptw_inputs[0].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.drainsystem.pptailwater.header") %>');
          validateBmpPptw.addValidation(pptw_inputs[1].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.drainsystem.pptailwater.header") %>');
          validateBmpPptw.addValidation(pptw_inputs[2].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.drainsystem.pptailwater.header") %>');
          validateBmpPptw.addValidation(pptw_inputs[0].name, "gt=0", '<%= t("managepage.bmpdesc.drainsystem.pptailwater.header") %>' + " " + '<%= t("bmp.reservoir_area") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
          validateBmpPptw.addValidation(pptw_inputs[0].name, "lte=99999", '<%= t("managepage.bmpdesc.drainsystem.pptailwater.header") %>' + " " + '<%= t("bmp.reservoir_area") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 99999.00");
          validateBmpPptw.addValidation(pptw_inputs[1].name, "gt=0", '<%= t("managepage.bmpdesc.drainsystem.pptailwater.header") %>' + " " + '<%= t("bmp.width") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
          validateBmpPptw.addValidation(pptw_inputs[2].name, "gt=0", '<%= t("managepage.bmpdesc.drainsystem.pptailwater.header") %>' + " " + '<%= t("bmp.sides") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
          validateBmpPptw.addValidation(pptw_inputs[2].name, "lte=4.00", '<%= t("managepage.bmpdesc.drainsystem.pptailwater.header") %>' + " " + '<%= t("bmp.sides") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 4.00");
        } else {
          confirm_check(7);
        }
      }
      function validationsBmpWl() {
        var wl_inputs = $('[name^=bmp_wl]').valueOf();
        validateBmpWl.addValidation(wl_inputs[0].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.wetponds.wetlands.header") %>');
        validateBmpWl.addValidation(wl_inputs[0].name, "gt=0", '<%= t("managepage.bmpdesc.wetponds.wetlands.header") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpWl.addValidation(wl_inputs[0].name, "lte=99999.00", '<%= t("managepage.bmpdesc.wetponds.wetlands.header") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 99999.00");
      }
      function validationsBmpPnd() {
        var pnd_inputs = $('[name^=bmp_pnd]').valueOf();
        validateBmpPnd.addValidation(pnd_inputs[0].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.wetponds.ponds.header") %>');
        validateBmpPnd.addValidation(pnd_inputs[0].name, "gt=0", '<%= t("managepage.bmpdesc.wetponds.ponds.header") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpPnd.addValidation(pnd_inputs[0].name, "lte=1.0", '<%= t("managepage.bmpdesc.wetponds.ponds.header") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 1.00");
      }
      function validationsBmpSf() {
        var sf_inputs = $('[name^=bmp_sf]').valueOf();
        if (promptMsg("This BMP requires a Filter Strip. Continuing will clear any data you may have entered for any BMP belonging to the same group as Filter Strip.")) {//check with Oscar for best prompt msg for user
          validationsBmpFs(0);
          $('#select_13').prop('checked', true);
          $('#13').show();
          for(n = 0; n < sf_inputs.length; n++) {
            validateBmpSf.addValidation(sf_inputs[n].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.stream.fencing.header") %>');
          }
          validateBmpSf.addValidation(sf_inputs[0].name, "gt=0", '<%= t("managepage.bmpdesc.stream.fencing.header") %>' + " " + '<%= t("bmp.animals") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
          validateBmpSf.addValidation(sf_inputs[0].name, "lte=99999.00", '<%= t("managepage.bmpdesc.stream.fencing.header") %>' + " " + '<%= t("bmp.animals") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 99999.00");
          validateBmpSf.addValidation(sf_inputs[1].name, "gt=0", '<%= t("managepage.bmpdesc.stream.fencing.header") %>' + " " + '<%= t("bmp.stream_fencing_frequency") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
          validateBmpSf.addValidation(sf_inputs[1].name, "lte=365", '<%= t("managepage.bmpdesc.stream.fencing.header") %>' + " " + '<%= t("bmp.stream_fencing_frequency") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 365");
          validateBmpSf.addValidation(sf_inputs[2].name, "gt=0", '<%= t("managepage.bmpdesc.stream.fencing.header") %>' + " " + '<%= t("bmp.hours") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
          validateBmpSf.addValidation(sf_inputs[2].name, "lte=24.00", '<%= t("managepage.bmpdesc.stream.fencing.header") %>' + " " + '<%= t("bmp.hours") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 24");
          validateBmpSf.addValidation(sf_inputs[4].name, "gt=0", '<%= t("managepage.bmpdesc.stream.fencing.header") %>' + " " + '<%= t("bmp.dry_manure") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
          validateBmpSf.addValidation(sf_inputs[4].name, "lte=99999.00", '<%= t("managepage.bmpdesc.stream.fencing.header") %>' + " " + '<%= t("bmp.dry_manure") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 99999.00");
          validateBmpSf.addValidation(sf_inputs[5].name, "gt=0", '<%= t("managepage.bmpdesc.stream.fencing.header") %>' + " " + '<%= t("bmp.no3_n") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
          validateBmpSf.addValidation(sf_inputs[5].name, "lte=1.00", '<%= t("managepage.bmpdesc.stream.fencing.header") %>' + " " + '<%= t("bmp.no3_n") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 1.0");
          validateBmpSf.addValidation(sf_inputs[6].name, "gt=0", '<%= t("managepage.bmpdesc.stream.fencing.header") %>' + " " + '<%= t("bmp.po4_p") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
          validateBmpSf.addValidation(sf_inputs[6].name, "lte=1.00", '<%= t("managepage.bmpdesc.stream.fencing.header") %>' + " " + '<%= t("bmp.po4_p") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 1.0");
          validateBmpSf.addValidation(sf_inputs[7].name, "gt=0", '<%= t("managepage.bmpdesc.stream.fencing.header") %>' + " " + '<%= t("bmp.org_n") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
          validateBmpSf.addValidation(sf_inputs[7].name, "lte=1.00", '<%= t("managepage.bmpdesc.stream.fencing.header") %>' + " " + '<%= t("bmp.org_n") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 1.0");
          validateBmpSf.addValidation(sf_inputs[8].name, "gt=0", '<%= t("managepage.bmpdesc.stream.fencing.header") %>' + " " + '<%= t("bmp.org_p") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
          validateBmpSf.addValidation(sf_inputs[8].name, "lte=1.00", '<%= t("managepage.bmpdesc.stream.fencing.header") %>' + " " + '<%= t("bmp.org_p") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 1.0");
        } else {
          confirm_check(10);
        }
      }
      function validationsBmpSbs() {
        var sbs_inputs = $('[name^=bmp_sbs]').valueOf();
        validateBmpSbs.addValidation(sbs_inputs[0].name, "selone", '<%= t("pdf.streambank_stabilization") %>' + " " + '<%= t("validate.checkbox") %>');
      }
      function validationsBmpRf(i) {
        var rf_inputs = $('[name^=bmp_rf]').valueOf();
        if (i == 0) {
          validateBmpCb.clearAllValidations();
          validateBmpWw.clearAllValidations();
          validateBmpFs.clearAllValidations();
          $("#select_13, #select_14, #select_15").prop('checked', false);
          $("tbody#13 input, tbody#14 input, tbody#15 input").val("");
          $("tbody#13 select, tbody#14 select, tbody#15 select").val([]);
        }
        for(n = 0; n < rf_inputs.length; n++){
          validateBmpRf.addValidation(rf_inputs[n].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.stream.forestbuffer.header") %>');
        }
        validateBmpRf.addValidation(rf_inputs[0].name, "gt=0", '<%= t("managepage.bmpdesc.stream.forestbuffer.header") %>' + '<%= t("pdf.area")%>' + " " + '<%= t("bmp.acres") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpRf.addValidation(rf_inputs[0].name, "lte=100000", '<%= t("managepage.bmpdesc.stream.forestbuffer.header") %>' + '<%= t("pdf.area")%>' + " " + '<%= t("bmp.acres") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 100000");
        validateBmpRf.addValidation(rf_inputs[1].name, "gt=0", '<%= t("managepage.bmpdesc.stream.forestbuffer.header") %>' + " " + '<%= t("bmp.width") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpRf.addValidation(rf_inputs[2].name, "gte=0.25", '<%= t("managepage.bmpdesc.stream.forestbuffer.header") %>' + " " + '<%= t("pdf.area") %>' + " " + '<%= t("bmp.grass_field_portion") %>' + ": " + '<%= t("validate.input_greaterequal") %>' + " 0.25");
        validateBmpRf.addValidation(rf_inputs[2].name, "lte=0.75", '<%= t("managepage.bmpdesc.stream.forestbuffer.header") %>' + " " + '<%= t("pdf.area") %>' + " " + '<%= t("bmp.grass_field_portion") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 0.75");
        validateBmpRf.addValidation(rf_inputs[3].name, "gte=0.25", '<%= t("managepage.bmpdesc.stream.forestbuffer.header") %>' + " " + '<%= t("bmp.slope_ratio_label") %>' + ": " + '<%= t("validate.input_greaterequal") %>' + " 0.25");
        validateBmpRf.addValidation(rf_inputs[3].name, "lte=1.00", '<%= t("managepage.bmpdesc.stream.forestbuffer.header") %>' + " " + '<%= t("bmp.slope_ration_label") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 1.0");
      }
      function validationsBmpFs(i) {
        var fs_inputs = $('[name^=bmp_fs]').valueOf();
        if (i == 0) {
          validateBmpCb.clearAllValidations();
          validateBmpWw.clearAllValidations();
          validateBmpRf.clearAllValidations();
          $("#select_12, #select_14, #select_15").prop('checked', false);
          $("tbody#12 input, tbody#14 input, tbody#15 input").val("");
          $("tbody#14 select, tbody#15 select").val([]);
        }
        for(n = 0; n < fs_inputs.length; n++){
          if(n != 1)
            validateBmpFs.addValidation(fs_inputs[n].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.stream.filterstrip.header") %>');
        }
        validateBmpFs.addValidation(fs_inputs[1].name, "gt=0", '<%= t("managepage.bmpdesc.stream.filterstrip.header") %>' + '<%= t("pdf.area")%>' + " " + '<%= t("bmp.acres") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpFs.addValidation(fs_inputs[1].name, "lte=100000", '<%= t("managepage.bmpdesc.stream.filterstrip.header") %>' + '<%= t("pdf.area")%>' + " " + '<%= t("bmp.acres") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 100000");
        validateBmpFs.addValidation(fs_inputs[2].name, "gt=0", '<%= t("managepage.bmpdesc.stream.filterstrip.header") %>' + " " + '<%= t("bmp.width") %>' + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpFs.addValidation(fs_inputs[3].name, "gte=0.25", '<%= t("managepage.bmpdesc.stream.filterstrip.header") %>' + " Buffer slope ratio: " + '<%= t("validate.input_greaterequal") %>' + " 0.25");
        validateBmpFs.addValidation(fs_inputs[3].name, "lte=1.00", '<%= t("managepage.bmpdesc.stream.filterstrip.header") %>' + " Buffer slope ratio: " + '<%= t("validate.input_lessequal") %>' + " 1.0");
      }
      function validationsBmpWw(i) {
        var ww_inputs = $('[name^=bmp_ww]').valueOf();
        if (i == 0) {
          validateBmpCb.clearAllValidations();
          validateBmpFs.clearAllValidations();
          validateBmpRf.clearAllValidations();
          $("#select_12, #select_13, #select_15").prop('checked', false);
          $("tbody#12 input, tbody#13 input, tbody#15 input").val("");
          $("tbody#13 select, tbody#15 select").val([]);
        }
        for(n = 0; n < ww_inputs.length; n++){
            validateBmpWw.addValidation(ww_inputs[n].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.stream.waterway.header") %>');
        }
        validateBmpWw.addValidation(ww_inputs[1].name, "gt=0", '<%= t("managepage.bmpdesc.stream.waterway.header") %>' + " " + '<%= t("bmp.width") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
      }
      function validationsBmpCb(i) {
        var cb_inputs = $('[name^=bmp_cb]').valueOf();
        if (i == 0) {
          validateBmpRf.clearAllValidations();
          validateBmpFs.clearAllValidations();
          validateBmpWw.clearAllValidations();
          $("#select_12, #select_13, #select_14").prop('checked', false);
          $("tbody#12 input, tbody#13 input, tbody#14 input").val("");
          $("tbody#13 select, tbody#14 select").val([]);
        }
        for(n = 0; n < cb_inputs.length; n++){
            validateBmpCb.addValidation(cb_inputs[n].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("managepage.bmpdesc.contour.header") %>');
        }
        validateBmpCb.addValidation(cb_inputs[0].name, "gt=0", '<%= t("managepage.bmpdesc.contour.header") %>' + " " + '<%= t("bmp.buffer_width") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpCb.addValidation(cb_inputs[1].name, "gt=0", '<%= t("managepage.bmpdesc.contour.header") %>' + " " + '<%= t("bmp.crop_width") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
      }
      function validationsBmpLl() {
        var ll_inputs = $('[name^=bmp_ll]').valueOf();
        validateBmpLl.addValidation(ll_inputs[0].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("pdf.land_leveling") %>');
        validateBmpLl.addValidation(ll_inputs[0].name, "gt=0", '<%= t("pdf.land_leveling") %>' + " " + '<%= t("bmp.slope_reduction") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpLl.addValidation(ll_inputs[0].name, "lte=100.00", '<%= t("pdf.land_leveling") %>' + " " + '<%= t("bmp.slope_reduction") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 100.00");
      }
      function validationsBmpTs() {
        var ts_inputs = $('[name^=bmp_ts]').valueOf();
        validateBmpTs.addValidation(ts_inputs[0].name, "selone", '<%= t("managepage.bmpdesc.landgrading.terrace.header")%>' + ": " + '<%= t("validate.checkbox") %>');
      }
      function validationsBmpMc() {
        var mc_inputs = $('[name^=bmp_mc]').valueOf();
        for (n = 0; n < mc_inputs.length; n++) {
          validateBmpMc.addValidation(mc_inputs[n].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("bmp.manure_control") %>');
        }
        validateBmpMc.addValidation(mc_inputs[1].name, "gt=0", '<%= t("bmp.manure_control") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpMc.addValidation(mc_inputs[2].name, "gt=0", '<%= t("bmp.manure_control") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpMc.addValidation(mc_inputs[3].name, "gt=0", '<%= t("bmp.manure_control") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpMc.addValidation(mc_inputs[4].name, "gt=0", '<%= t("bmp.manure_control") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpMc.addValidation(mc_inputs[1].name, "lte=100", '<%= t("bmp.manure_control") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 100");
        validateBmpMc.addValidation(mc_inputs[2].name, "lte=100", '<%= t("bmp.manure_control") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 100");
        validateBmpMc.addValidation(mc_inputs[3].name, "lte=100", '<%= t("bmp.manure_control") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 100");
        validateBmpMc.addValidation(mc_inputs[4].name, "lte=100", '<%= t("bmp.manure_control") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 100");
      }
      function validationsBmpCc() {
        var cc_inputs = $('[name^=bmp_cc]').valueOf();
        for (n = 0; n < cc_inputs.length; n++) {
          validateBmpCc.addValidation(cc_inputs[n].name, "gt=0", '<%= t("pdf.climate") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
          validateBmpCc.addValidation(cc_inputs[n].name, "lte=100", '<%= t("pdf.climate") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 100");
        }
      }
      function validationsBmpAc() {
        var ac_inputs = $('[name^=bmp_ac]').valueOf();
        validateBmpAc.addValidation(ac_inputs[0].name, "selone", '<%= t("pdf.asphalt_concrete") %>' + ": " + '<%= t("validate.checkbox") %>');
      }
      function validationsBmpGc() {
        var gc_inputs = $('[name^=bmp_gc]').valueOf();
        validateBmpGc.addValidation(gc_inputs[0].name, "selone", '<%= t("pdf.grass_cover") %>' + ": " + '<%= t("validate.checkbox") %>');
      }
      function validationsBmpSa() {
        var sa_inputs = $('[name^=bmp_sa]').valueOf();
        validateBmpSa.addValidation(sa_inputs[0].name, "selone", '<%= t("pdf.slope_adjustment") %>' +  ": " + '<%= t("validate.checkbox") %>');
      }
      function validationsBmpSdg() {
        var sdg_inputs = $('[name^=bmp_sdg]').valueOf();
        for(n = 0; n < sdg_inputs.length; n++) {
          validateBmpSdg.addValidation(sdg_inputs[n].name, "req", '<%= t("validate.required") %>' + " " + '<%= t("pdf.shading") %>');
        }
        validateBmpSdg.addValidation(sdg_inputs[1].name, "gt=0", '<%= t("pdf.shading") %>' + " " + '<%= t("pdf.area")%>' + " " + '<%= t("bmp.acres") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpSdg.addValidation(sdg_inputs[1].name, "lte=100000", '<%= t("pdf.shading") %>' + " " + '<%= t("pdf.area")%>' + " " + '<%= t("bmp.acres") %>' + ": " + '<%= t("validate.input_lessequal") %>' + " 100000.");
        validateBmpSdg.addValidation(sdg_inputs[2].name, "gt=0", '<%= t("pdf.shading") %>' + " " + '<%= t("bmp.width") %>' + ": " + '<%= t("validate.input_greater") %>' + " 0");
        validateBmpSdg.addValidation(sdg_inputs[3].name, "gte=0.25", '<%= t("pdf.shading") %>' + " " + '<%= t("bmp.slope_ratio_label")%>' + ": " + '<%= t("validate.input_greaterequal") %>' + " 0.25");
        validateBmpSdg.addValidation(sdg_inputs[3].name, "lte=1", '<%= t("pdf.shading") %>' + " " + '<%= t("bmp.slope_ratio_label")%>' + ": " + '<%= t("validate.input_lessequal") %>' + " 1");
      }
      function promptMsg(msg) {
        var r = confirm(msg);
        if (r == true) {
          return true;
        } else {
            return false;
        }
      }
    });
</script>
