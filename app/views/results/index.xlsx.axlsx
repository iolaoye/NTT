wb = xlsx_package.workbook
wb.styles do |s|
  table_header = s.add_style :alignment => {:horizontal => :center }, :bg_color => "204060", :fg_color => "FF"
  main_row = s.add_style :bg_color => "D5DDE5", :fg_color => "0000FF"
  wb.add_worksheet(name: "Results") do |sheet|
    if session[:simulation] == 'scenario'
      if !@scenario1.blank?
        if !@scenario2.blank?
          if !@scenario3.blank?
            sheet.add_row ["", Scenario.find(@scenario1).name, "", Scenario.find(@scenario2).name, "", "", "", Scenario.find(@scenario3).name, "", "", ""], :types => [:string], :widths => [20, :auto, :auto, :auto, :auto, :auto, :auto, 20]
          else
            sheet.add_row ["", Scenario.find(@scenario1).name, "", Scenario.find(@scenario2).name, "", "", "", t('result.scenario3'), "", "", ""], :types => [:string], :widths => [20, :auto, :auto, :auto, :auto, :auto, :auto, 20]
          end
        else
          sheet.add_row ["", Scenario.find(@scenario1).name, "", t('result.scenario2'), "", "", t('result.scenario3'), "", ""], :types => [:string], :widths => [20, :auto, :auto, :auto, :auto, :auto, :auto, 20]
        end
      else
        sheet.add_row ["", t('result.scenario1'), "", t('result.scenario2'), "", "", t('result.scenario3'), "", "", t('result.scenario3')], :types => [:string], :widths => [20, :auto, :auto, :auto, :auto, :auto, :auto, 20]
      end
    else
      if !@scenario1.blank?
        if !@scenario2.blank?
          if !@scenario3.blank?
            sheet.add_row ["", Watershed.find(@scenario1).name, "", Watershed.find(@scenario2).name, "", "", "", Watershed.find(@scenario3).name, "", "", ""], :types => [:string], :widths => [20, :auto, :auto, :auto, :auto, :auto, :auto, 20]
          else
            sheet.add_row ["", Watershed.find(@scenario1).name, "", Watershed.find(@scenario2).name, "", "", "", t('result.scenario3'), "", "", ""], :types => [:string], :widths => [20, :auto, :auto, :auto, :auto, :auto, :auto, 20]
          end
        else
          sheet.add_row ["", Watershed.find(@scenario1).name, "", t('result.scenario2'), "", "", "", t('result.scenario3'), "", "", ""], :types => [:string], :widths => [20, :auto, :auto, :auto, :auto, :auto, :auto, 20]
        end
      else
        sheet.add_row ["", t('result.scenario1'), "", t('result.scenario2'), "", "", "", t('result.scenario3'), "", "", ""], :types => [:string], :widths => [20, :auto, :auto, :auto, :auto, :auto, :auto, 20]
      end
    end
    sheet.merge_cells "B1:C1"
    sheet.merge_cells "D1:G1"
    sheet.merge_cells "H1:K1"
    sheet.add_row [t('result.description'), "Losses", "(±)", "Losses", "(±)", t('general.change'), "(%)", "Losses", "(±)", t('general.change'), "(%)"], :types => [:string]
    sheet['A1:K2'].each { |c| c.style = table_header }
    @id = "scenario_id"
    simul = ""
    if session[:simulation] != "scenario"
      @id = "watershed_id"
      simul = "scenario_id"
    else
      simul = "watershed_id"
    end
    if @scenario1 != "0"
      require 'enumerable/confidence_interval'
      #results_data1 = AnnualResult.select('*','no3-qn as no3', 'flow-surface_flow as flow').where(:sub1 => 0, :scenario_id => @scenario1)
      #cis1 = results_data1.group_by(&:sub1).map { |k, v| [k, v.map(&:orgn).confidence_interval, v.map(&:qn).confidence_interval, v.map(&:no3).confidence_interval, v.map(&:qdrn).confidence_interval, v.map(&:orgp).confidence_interval, v.map(&:po4).confidence_interval, v.map(&:qdrp).confidence_interval, v.map(&:surface_flow).confidence_interval, v.map(&:flow).confidence_interval, v.map(&:qdr).confidence_interval, v.map(&:irri).confidence_interval, v.map(&:dprk).confidence_interval, v.map(&:sed).confidence_interval, v.map(&:ymnu).confidence_interval] }
      #averages1 = AnnualResult.where(:sub1 => 0, simul.to_sym => @scenario1).pluck('avg(orgn)', 'avg(qn)', 'avg(no3-qn)', 'avg(qdrn)', 'avg(orgp)', 'avg(po4)', 'avg(qdrp)', 'avg(surface_flow)', 'avg(flow-surface_flow)', 'avg(qdr)', 'avg(irri)', 'avg(dprk)', 'avg(sed)', 'avg(ymnu)')
      crops1 = CropResult.where(@id + " = ? AND (yldg + yldf) > ?", @scenario1, 0).order("name").group(:name).pluck('avg(yldg) + avg(yldf)', 'avg(ws)', 'avg(ns)', 'avg(ps)', 'avg(ts)', 'name')
      crops_data1 = CropResult.select('*', 'yldg+yldf AS yield').where(@id + " = ? AND yldg+yldf > ?", @scenario1, 0)
      cic1 = Hash[*crops_data1.group_by(&:name).map { |k,v| [k, v.map(&:yield).confidence_interval]}.flatten]
      averages2 = nil
      if @scenario2 != "0" && @scenario2 != ""
        #results_data2 = AnnualResult.select('*','no3-qn as no3', 'flow-surface_flow as flow').where(:sub1 => 0,  :scenario_id => @scenario2)
        #cis2 = results_data2.group_by(&:sub1).map { |k, v| [k, v.map(&:orgn).confidence_interval, v.map(&:qn).confidence_interval, v.map(&:no3).confidence_interval, v.map(&:qdrn).confidence_interval, v.map(&:orgp).confidence_interval, v.map(&:po4).confidence_interval, v.map(&:qdrp).confidence_interval, v.map(&:surface_flow).confidence_interval, v.map(&:flow).confidence_interval, v.map(&:qdr).confidence_interval, v.map(&:irri).confidence_interval, v.map(&:dprk).confidence_interval, v.map(&:sed).confidence_interval, v.map(&:ymnu).confidence_interval] }
        #averages2 = AnnualResult.where(:sub1 => 0, :scenario_id => @scenario2).pluck('avg(orgn)', 'avg(qn)', 'avg(no3-qn)', 'avg(qdrn)', 'avg(orgp)', 'avg(po4)', 'avg(qdrp)', 'avg(surface_flow)', 'avg(flow-surface_flow)', 'avg(qdr)', 'avg(irri)', 'avg(dprk)', 'avg(sed)', 'avg(ymnu)')
        crops2 = CropResult.where(@id + " = ? AND (yldg + yldf) > ?", @scenario2, 0).order("name").group(:name).pluck('avg(yldg) + avg(yldf)', 'avg(ws)', 'avg(ns)', 'avg(ps)', 'avg(ts)', 'name')
        crops_data2 = CropResult.select('*', 'yldg+yldf AS yield').where(@id + " = ? AND yldg+yldf > ?", @scenario2, 0) 
        cic2 = Hash[*crops_data2.group_by(&:name).map { |k,v| [k, v.map(&:yield).confidence_interval]}.flatten] 
        if @scenario3 != "0" && @scenario2 != ""
          #results_data3 = AnnualResult.select('*','no3-qn as no3', 'flow-surface_flow as flow').where(:sub1 => 0,  :scenario_id => @scenario3)
          #cis3 = results_data3.group_by(&:sub1).map { |k, v| [k, v.map(&:orgn).confidence_interval, v.map(&:qn).confidence_interval, v.map(&:no3).confidence_interval, v.map(&:qdrn).confidence_interval, v.map(&:orgp).confidence_interval, v.map(&:po4).confidence_interval, v.map(&:qdrp).confidence_interval, v.map(&:surface_flow).confidence_interval, v.map(&:flow).confidence_interval, v.map(&:qdr).confidence_interval, v.map(&:irri).confidence_interval, v.map(&:dprk).confidence_interval, v.map(&:sed).confidence_interval, v.map(&:ymnu).confidence_interval] } 
          #averages3 = AnnualResult.where(:sub1 => 0, :scenario_id => @scenario3).pluck('avg(orgn)', 'avg(qn)', 'avg(no3-qn)', 'avg(qdrn)', 'avg(orgp)', 'avg(po4)', 'avg(qdrp)', 'avg(surface_flow)', 'avg(flow-surface_flow)', 'avg(qdr)', 'avg(irri)', 'avg(dprk)', 'avg(sed)', 'avg(ymnu)') 
          crops3 = CropResult.where(@id + " = ? AND (yldg + yldf) > ?", @scenario3, 0).order("name").group(:name).pluck('avg(yldg) + avg(yldf)', 'avg(ws)', 'avg(ns)', 'avg(ps)', 'avg(ts)', 'name')
          crops_data3 = CropResult.select('*', 'yldg+yldf AS yield').where(@id + " = ? AND yldg+yldf > ?", @scenario3, 0) 
          cic3 = Hash[*crops_data3.group_by(&:name).map { |k,v| [k, v.map(&:yield).confidence_interval]}.flatten] 
        end
      end
      if @scenario2 != "0" && @scenario2 != ""
        if @scenario3 != "0" && @scenario3 != ""
          difference1 = @averages2[0][0]+@averages2[0][1]+@averages2[0][2]+@averages2[0][3]-(@averages1[0][0]+@averages1[0][1]+@averages1[0][2]+@averages1[0][3])
          reduction1 = difference1 / (@averages1[0][0]+@averages1[0][1]+@averages1[0][2]+@averages1[0][3]) * 100
          difference2 = @averages3[0][0]+@averages3[0][1]+@averages3[0][2]+@averages3[0][3]-(@averages1[0][0]+@averages1[0][1]+@averages1[0][2]+@averages1[0][3])
          reduction2 = difference2 / (@averages1[0][0]+@averages1[0][1]+@averages1[0][2]+@averages1[0][3]) * 100
          sheet.add_row ["Total N (lbs/ac)", sprintf("%8.1f", @averages1[0][0]+@averages1[0][1]+@averages1[0][2]+@averages1[0][3]), sprintf("%8.1f",@cis1[0][1]+@cis1[0][2]+@cis1[0][3]+@cis1[0][4]), sprintf("%8.1f", @averages2[0][0]+@averages2[0][1]+@averages2[0][2]+@averages2[0][3]), sprintf("%8.1f",@cis2[0][1]+@cis2[0][2]+@cis2[0][3]+@cis2[0][4]), sprintf("%8.1f", difference1), sprintf("%8.1f", reduction1), sprintf("%8.1f", @averages3[0][0]+@averages3[0][1]+@averages3[0][2]+@averages3[0][3]), sprintf("%8.1f",@cis3[0][1]+@cis3[0][2]+@cis3[0][3]+@cis3[0][4]), sprintf("%8.1f", difference2).to_s, sprintf("%8.1f", reduction2).to_s], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float], :style => main_row
          sheet.add_row ["Org N (lbs/ac)", sprintf("%8.2f", @averages1[0][0]).to_s, sprintf("%8.1f", @cis1[0][1]), sprintf("%8.2f", @averages2[0][0]), sprintf("%8.1f", @cis2[0][1]), sprintf("%8.2f", @averages2[0][0]-@averages1[0][0]), sprintf("%8.2f", ((@averages2[0][0]-@averages1[0][0]) / @averages1[0][0]) * 100), sprintf("%8.2f", @averages3[0][0]), sprintf("%8.1f", @cis3[0][1]), sprintf("%8.2f", @averages3[0][0]-@averages1[0][0]), sprintf("%8.2f", ((@averages3[0][0]-@averages1[0][0]) / @averages1[0][0]) * 100)], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float]
          sheet.add_row ["Runoff N (lbs/ac)", sprintf("%8.2f", @averages1[0][1]).to_s, sprintf("%8.1f", @cis1[0][2]), sprintf("%8.2f", @averages2[0][1]), sprintf("%8.1f", @cis2[0][2]), sprintf("%8.2f", @averages2[0][1]-@averages1[0][1]), sprintf("%8.2f", ((@averages2[0][1]-@averages1[0][1]) / @averages1[0][1]) * 100), sprintf("%8.2f", @averages3[0][1]), sprintf("%8.1f", @cis3[0][2]), sprintf("%8.2f", @averages3[0][1]-@averages1[0][1]), sprintf("%8.2f", ((@averages3[0][1]-@averages1[0][1]) / @averages1[0][1]) * 100)], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float]
          sheet.add_row ["Subsurface N (lbs/ac)", sprintf("%8.2f", @averages1[0][2]).to_s, sprintf("%8.1f", @cis1[0][3]), sprintf("%8.2f", @averages2[0][2]), sprintf("%8.1f", @cis2[0][3]), sprintf("%8.2f", @averages2[0][2]-@averages1[0][2]), sprintf("%8.2f", ((@averages2[0][2]-@averages1[0][2]) / @averages1[0][2]) * 100), sprintf("%8.2f", @averages3[0][2]), sprintf("%8.1f", @cis3[0][3]), sprintf("%8.2f", @averages3[0][2]-@averages1[0][2]), sprintf("%8.2f", ((@averages3[0][2]-@averages1[0][2]) / @averages1[0][2]) * 100)], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float]
          sheet.add_row ["Tile Drain N (lbs/ac)", sprintf("%8.2f", @averages1[0][3]).to_s, sprintf("%8.1f", @cis1[0][4]), sprintf("%8.2f", @averages2[0][3]), sprintf("%8.1f", @cis2[0][4]), sprintf("%8.2f", @averages2[0][3]-@averages1[0][3]), sprintf("%8.1f", ((@averages2[0][3]-@averages1[0][3]) / @averages1[0][3]) * 100), sprintf("%8.2f", @averages3[0][3]), sprintf("%8.1f", @cis3[0][4]), sprintf("%8.2f", @averages3[0][3]-@averages1[0][3]), sprintf("%8.1f", ((@averages3[0][3]-@averages1[0][3]) / @averages1[0][3]) * 100)], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float]
        
          difference1 = @averages2[0][4]+@averages2[0][5]+@averages2[0][6]-(@averages1[0][4]+@averages1[0][5]+@averages1[0][6])
          reduction1 = difference1 / (@averages1[0][4]+@averages1[0][5]+@averages1[0][6]) * 100
          difference2 = @averages3[0][4]+@averages3[0][5]+@averages3[0][6]-(@averages1[0][4]+@averages1[0][5]+@averages1[0][6])
          reduction2 = difference2 / (@averages1[0][4]+@averages1[0][5]+@averages1[0][6]) * 100
          sheet.add_row ["Total P (lbs/ac)", sprintf("%8.1f", @averages1[0][4]+@averages1[0][5]+@averages1[0][6]), sprintf("%8.1f",@cis1[0][5]+@cis1[0][6]+@cis1[0][7]), sprintf("%8.1f", @averages2[0][4]+@averages2[0][5]+@averages2[0][6]), sprintf("%8.1f",@cis2[0][5]+@cis2[0][6]+@cis2[0][7]), sprintf("%8.1f", difference1), sprintf("%8.1f", reduction1), sprintf("%8.1f", @averages3[0][4]+@averages3[0][5]+@averages3[0][6]), sprintf("%8.1f",@cis3[0][5]+@cis3[0][6]+@cis3[0][7]), sprintf("%8.1f", difference2), sprintf("%8.1f", reduction2)], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float], :style => main_row
          sheet.add_row ["Org P (lbs/ac)", sprintf("%8.2f", @averages1[0][4]).to_s, sprintf("%8.1f", @cis1[0][5]), sprintf("%8.2f", @averages2[0][4]), sprintf("%8.1f", @cis2[0][5]), sprintf("%8.2f", @averages2[0][4]-@averages1[0][4]), sprintf("%8.2f", ((@averages2[0][4]-@averages1[0][4]) / @averages1[0][4]) * 100), sprintf("%8.2f", @averages3[0][4]), sprintf("%8.1f", @cis3[0][5]), sprintf("%8.2f", @averages3[0][4]-@averages1[0][4]).to_s, sprintf("%8.2f", ((@averages3[0][4]-@averages1[0][4]) / @averages1[0][4]) * 100)], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float]
          sheet.add_row ["PO4 (lbs/ac)", sprintf("%8.2f", @averages1[0][5]).to_s, sprintf("%8.1f", @cis1[0][6]), sprintf("%8.2f", @averages2[0][5]), sprintf("%8.1f", @cis2[0][6]), sprintf("%8.2f", @averages2[0][5]-@averages1[0][5]), sprintf("%8.2f", ((@averages2[0][5]-@averages1[0][5]) / @averages1[0][5]) * 100), sprintf("%8.2f", @averages3[0][5]), sprintf("%8.1f", @cis3[0][6]), sprintf("%8.2f", @averages3[0][5]-@averages1[0][5]), sprintf("%8.2f", ((@averages3[0][5]-@averages1[0][5]) / @averages1[0][5]) * 100)], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float]
          sheet.add_row ["Tile Drain P (lbs/ac)", sprintf("%8.2f", @averages1[0][6]).to_s, sprintf("%8.1f", @cis1[0][7]), sprintf("%8.2f", @averages2[0][6]), sprintf("%8.1f", @cis2[0][7]), sprintf("%8.2f", @averages2[0][6]-@averages1[0][6]), sprintf("%8.2f", ((@averages2[0][6]-@averages1[0][6]) / @averages1[0][6]) * 100), sprintf("%8.2f", @averages3[0][6]), sprintf("%8.1f", @cis3[0][7]), sprintf("%8.2f", @averages3[0][6]-@averages1[0][6]), sprintf("%8.2f", ((@averages3[0][6]-@averages1[0][6]) / @averages1[0][6]) * 100)], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float]
        
          difference1 = @averages2[0][7]+@averages2[0][8]+@averages2[0][9]-(@averages1[0][7]+@averages1[0][8]+@averages1[0][9])
          reduction1 = difference1 / (@averages1[0][7]+@averages1[0][8]+@averages1[0][9]) * 100
          difference2 = @averages3[0][7]+@averages3[0][8]+@averages3[0][9]-(@averages1[0][7]+@averages1[0][8]+@averages1[0][9])
          reduction2 = difference2 / (@averages1[0][7]+@averages1[0][8]+@averages1[0][9]) * 100
          sheet.add_row ["Surface/Subsurface/Tile Drain Flow (in)", sprintf("%8.1f", @averages1[0][7]+@averages1[0][8]+@averages1[0][9]), sprintf("%8.1f",@cis1[0][8]+@cis1[0][9]+@cis1[0][10]), sprintf("%8.1f", @averages2[0][7]+@averages2[0][8]+@averages2[0][9]), sprintf("%8.1f",@cis2[0][8]+@cis2[0][9]+@cis2[0][10]), sprintf("%8.1f", difference1), sprintf("%8.1f", reduction1), sprintf("%8.1f", @averages3[0][7]+@averages3[0][8]+@averages3[0][9]), sprintf("%8.1f",@cis3[0][8]+@cis3[0][9]+@cis3[0][10]), sprintf("%8.1f", difference2), sprintf("%8.1f", reduction2).to_s], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float], :style => main_row
          sheet.add_row ["Surface Flow (in)", sprintf("%8.2f", @averages1[0][7]), sprintf("%8.1f", @cis1[0][8]), sprintf("%8.2f", @averages2[0][7]), sprintf("%8.1f", @cis2[0][8]), sprintf("%8.2f", @averages2[0][7]-@averages1[0][7]), sprintf("%8.2f", ((@averages2[0][7]-@averages1[0][7]) / @averages1[0][7]) * 100), sprintf("%8.2f", @averages3[0][7]), sprintf("%8.1f", @cis3[0][8]), sprintf("%8.2f", @averages3[0][7]-@averages1[0][7]), sprintf("%8.2f", ((@averages3[0][7]-@averages1[0][7]) / @averages1[0][7]) * 100) + ")"], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float]
          sheet.add_row ["Subsurface Flow (in)", sprintf("%8.2f", @averages1[0][8]), sprintf("%8.1f", @cis1[0][9]), sprintf("%8.2f", @averages2[0][8]), sprintf("%8.1f", @cis2[0][9]), sprintf("%8.2f", @averages2[0][8]-@averages1[0][8]), sprintf("%8.2f", ((@averages2[0][8]-@averages1[0][8]) / @averages1[0][8]) * 100), sprintf("%8.2f", @averages3[0][8]), sprintf("%8.1f", @cis3[0][9]), sprintf("%8.2f", @averages3[0][8]-@averages1[0][8]), sprintf("%8.2f", ((@averages3[0][8]-@averages1[0][8]) / @averages1[0][8]) * 100) + ")"], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float]
          sheet.add_row ["Tile Drain Flow (in)", sprintf("%8.2f", @averages1[0][9]), sprintf("%8.1f", @cis1[0][10]), sprintf("%8.2f", @averages2[0][9]), sprintf("%8.1f", @cis2[0][10]), sprintf("%8.2f", @averages2[0][9]-@averages1[0][9]), sprintf("%8.2f", ((@averages2[0][9]-@averages1[0][9]) / @averages1[0][9]) * 100), sprintf("%8.2f", @averages3[0][9]), sprintf("%8.1f", @cis3[0][10]), sprintf("%8.2f", @averages3[0][9]-@averages1[0][9]), sprintf("%8.2f", ((@averages3[0][9]-@averages1[0][9]) / @averages1[0][9]) * 100) + ")"], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float]
        
          difference1 = @averages2[0][10]+@averages2[0][11]-(@averages1[0][10]+@averages1[0][11])
          reduction1 = difference1 / (@averages1[0][10]+@averages1[0][11]) * 100
          difference2 = @averages3[0][10]+@averages3[0][11]-(@averages1[0][10]+@averages1[0][11])
          reduction2 = difference2 / (@averages1[0][10]+@averages1[0][11]) * 100
          sheet.add_row ["Total Other Water Info (in)", sprintf("%8.1f", @averages1[0][10]+@averages1[0][11]).to_s, sprintf("%8.1f",@cis1[0][11]+@cis1[0][12]), sprintf("%8.1f", @averages2[0][10]+@averages2[0][11]), sprintf("%8.1f",@cis2[0][11]+@cis2[0][12]), sprintf("%8.1f", difference1), sprintf("%8.1f", reduction1), sprintf("%8.1f", @averages3[0][10]+@averages3[0][11]), sprintf("%8.1f",@cis3[0][11]+@cis3[0][12]), sprintf("%8.1f", difference2), sprintf("%8.1f", reduction2)], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float], :style => main_row
          sheet.add_row ["Irrigation Runoff (in)", sprintf("%8.2f", @averages1[0][10]).to_s, sprintf("%8.1f", @cis1[0][11]), sprintf("%8.2f", @averages2[0][10]), sprintf("%8.1f", @cis2[0][11]), sprintf("%8.2f", @averages2[0][10]-@averages1[0][10]), sprintf("%8.2f", ((@averages2[0][10]-@averages1[0][10]) / @averages1[0][10]) * 100), sprintf("%8.2f", @averages3[0][10]), sprintf("%8.1f", @cis3[0][11]), sprintf("%8.2f", @averages3[0][10]-@averages1[0][10]), sprintf("%8.2f", ((@averages3[0][10]-@averages1[0][10]) / @averages1[0][10]) * 100)], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float]
          sheet.add_row ["Deep Percolation (in)", sprintf("%8.2f", @averages1[0][11]), sprintf("%8.1f", @cis1[0][12]), sprintf("%8.2f", @averages2[0][11]), sprintf("%8.1f",@cis2[0][12]), sprintf("%8.2f", @averages2[0][11]-@averages1[0][11]), sprintf("%8.2f", ((@averages2[0][11]-@averages1[0][11]) / @averages1[0][11]) * 100), sprintf("%8.2f", @averages3[0][11]), sprintf("%8.1f", @cis3[0][12]), sprintf("%8.2f", @averages3[0][11]-@averages1[0][11]), sprintf("%8.2f", ((@averages3[0][11]-@averages1[0][11]) / @averages1[0][11]) * 100)], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float]
        
          difference1 = @averages2[0][12]+@averages2[0][13]-(@averages1[0][12]+@averages1[0][13])
          reduction1 = difference1 / (@averages1[0][12]+@averages1[0][13]) * 100
          difference2 = @averages3[0][12]+@averages3[0][13]-(@averages1[0][12]+@averages1[0][13])
          reduction2 = difference2 / (@averages1[0][12]+@averages1[0][13]) * 100
          sheet.add_row ["Total Sediment (t/ac)", sprintf("%8.1f", @averages1[0][12]+@averages1[0][13]), sprintf("%8.1f",@cis1[0][13]+@cis1[0][14]), sprintf("%8.1f", @averages2[0][12]+@averages2[0][13]), sprintf("%8.1f",@cis2[0][13]+@cis2[0][14]), sprintf("%8.1f", difference1), sprintf("%8.1f", reduction1), sprintf("%8.1f", @averages3[0][12]+@averages3[0][13]), sprintf("%8.1f",@cis3[0][13]+@cis3[0][14]), sprintf("%8.1f", difference2), sprintf("%8.1f", reduction2)], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float], :style => main_row
          sheet.add_row ["Surface Erosion (t/ac)", sprintf("%8.4f", @averages1[0][12]), sprintf("%8.1f", @cis1[0][13]), sprintf("%8.4f", @averages2[0][12]), sprintf("%8.1f", @cis2[0][13]), sprintf("%8.4f", @averages2[0][12]-@averages1[0][12]), sprintf("%8.2f", ((@averages2[0][12]-@averages1[0][12]) / @averages1[0][12]) * 100) + ")", sprintf("%8.4f", @averages3[0][12]), sprintf("%8.1f", @cis3[0][13]), sprintf("%8.4f", @averages3[0][12]-@averages1[0][12]), sprintf("%8.2f", ((@averages3[0][12]-@averages1[0][12]) / @averages1[0][12]) * 100)], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float]
          sheet.add_row ["Manure Erosion", sprintf("%8.4f", @averages1[0][13]), sprintf("%8.1f", @cis1[0][14]), sprintf("%8.4f", @averages2[0][13]), sprintf("%8.1f", @cis2[0][14]), sprintf("%8.4f", @averages2[0][13]-@averages1[0][13]), sprintf("%8.2f", ((@averages2[0][13]-@averages1[0][13]) / @averages1[0][13]) * 100) + ")", sprintf("%8.4f", @averages3[0][13]), sprintf("%8.1f", @cis3[0][14]) + ")", sprintf("%8.4f", @averages3[0][13]-@averages1[0][13]), sprintf("%8.2f", ((@averages3[0][13]-@averages1[0][13]) / @averages1[0][13]) * 100)], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float]
        else
          difference1 = @averages2[0][0]+@averages2[0][1]+@averages2[0][2]+@averages2[0][3]-(@averages1[0][0]+@averages1[0][1]+@averages1[0][2]+@averages1[0][3])
          reduction1 = difference1 / (@averages1[0][0]+@averages1[0][1]+@averages1[0][2]+@averages1[0][3]) * 100
          sheet.add_row ["Total N (lbs/ac)", sprintf("%8.1f", @averages1[0][0]+@averages1[0][1]+@averages1[0][2]+@averages1[0][3]), sprintf("%8.1f",@cis1[0][1]+@cis1[0][2]+@cis1[0][3]+@cis1[0][4]), sprintf("%8.1f", @averages2[0][0]+@averages2[0][1]+@averages2[0][2]+@averages2[0][3]), sprintf("%8.1f",@cis2[0][1]+@cis2[0][2]+@cis2[0][3]+@cis2[0][4]), sprintf("%8.1f", difference1), sprintf("%8.1f", reduction1), "", "", "", ""], :types => [:string, :float, :float, :float, :float, :float, :float], :style => main_row
          sheet.add_row ["Org N (lbs/ac)", sprintf("%8.2f", @averages1[0][0]).to_s, sprintf("%8.1f", @cis1[0][1]), sprintf("%8.2f", @averages2[0][0]), sprintf("%8.1f", @cis2[0][1]), sprintf("%8.2f", @averages2[0][0]-@averages1[0][0]), sprintf("%8.2f", ((@averages2[0][0]-@averages1[0][0]) / @averages1[0][0]) * 100), "", ""], :types => [:string, :float, :float, :float, :float, :float, :float]
          sheet.add_row ["Runoff N (lbs/ac)", sprintf("%8.2f", @averages1[0][1]).to_s, sprintf("%8.1f", @cis1[0][2]), sprintf("%8.2f", @averages2[0][1]), sprintf("%8.1f", @cis2[0][2]), sprintf("%8.2f", @averages2[0][1]-@averages1[0][1]), sprintf("%8.2f", ((@averages2[0][1]-@averages1[0][1]) / @averages1[0][1]) * 100), "", ""], :types => [:string, :float, :float, :float, :float, :float, :float]
          sheet.add_row ["Subsurface N (lbs/ac)", sprintf("%8.2f", @averages1[0][2]).to_s, sprintf("%8.1f", @cis1[0][3]), sprintf("%8.2f", @averages2[0][2]), sprintf("%8.1f", @cis2[0][3]), sprintf("%8.2f", @averages2[0][2]-@averages1[0][2]), sprintf("%8.2f", ((@averages2[0][2]-@averages1[0][2]) / @averages1[0][2]) * 100), "", ""], :types => [:string, :float, :float, :float, :float, :float, :float]
          sheet.add_row ["Tile Drain N (lbs/ac)", sprintf("%8.2f", @averages1[0][3]).to_s, sprintf("%8.1f", @cis1[0][4]), sprintf("%8.2f", @averages2[0][3]-@averages1[0][3]), sprintf("%8.1f", @cis2[0][4]), sprintf("%8.2f", @averages2[0][3]-@averages1[0][3]), sprintf("%8.1f", ((@averages2[0][3]-@averages1[0][3]) / @averages1[0][3]) * 100), "", ""], :types => [:string, :float, :float, :float, :float, :float, :float]
        
          difference1 = @averages2[0][4]+@averages2[0][5]+@averages2[0][6]-(@averages1[0][4]+@averages1[0][5]+@averages1[0][6])
          reduction1 = difference1 / (@averages1[0][4]+@averages1[0][5]+@averages1[0][6]) * 100
          sheet.add_row ["Total P (lbs/ac)", sprintf("%8.1f", @averages1[0][4]+@averages1[0][5]+@averages1[0][6]), sprintf("%8.1f",@cis1[0][5]+@cis1[0][6]+@cis1[0][7]), sprintf("%8.1f", @averages2[0][4]+@averages2[0][5]+@averages2[0][6]), sprintf("%8.1f",@cis2[0][5]+@cis2[0][6]+@cis2[0][7]), sprintf("%8.1f", difference1), sprintf("%8.1f", reduction1), "", "", "", ""], :types => [:string, :float, :float, :float, :float, :float, :float], :style => main_row
          sheet.add_row ["Org P (lbs/ac)", sprintf("%8.2f", @averages1[0][4]).to_s, sprintf("%8.1f", @cis1[0][5]), sprintf("%8.2f", @averages2[0][4]), sprintf("%8.1f", @cis2[0][5]), sprintf("%8.2f", @averages2[0][4]-@averages1[0][4]), sprintf("%8.2f", ((@averages2[0][4]-@averages1[0][4]) / @averages1[0][4]) * 100), "", ""], :types => [:string, :float, :float, :float, :float, :float, :float]
          sheet.add_row ["PO4 (lbs/ac)", sprintf("%8.2f", @averages1[0][5]).to_s, sprintf("%8.1f", @cis1[0][6]), sprintf("%8.2f", @averages2[0][5]), sprintf("%8.1f", @cis2[0][6]), sprintf("%8.2f", @averages2[0][5]-@averages1[0][5]), sprintf("%8.2f", ((@averages2[0][5]-@averages1[0][5]) / @averages1[0][5]) * 100), "", ""], :types => [:string, :float, :float, :float, :float, :float, :float]
          sheet.add_row ["Tile Drain P (lbs/ac)", sprintf("%8.2f", @averages1[0][6]).to_s, sprintf("%8.1f", @cis1[0][7]), sprintf("%8.2f", @averages2[0][6]), sprintf("%8.1f", @cis2[0][7]), sprintf("%8.2f", @averages2[0][6]-@averages1[0][6]), sprintf("%8.2f", ((@averages2[0][6]-@averages1[0][6]) / @averages1[0][6]) * 100), "", ""], :types => [:string, :float, :float, :float, :float, :float, :float]
        
          difference1 = @averages2[0][7]+@averages2[0][8]+@averages2[0][9]-(@averages1[0][7]+@averages1[0][8]+@averages1[0][9])
          reduction1 = difference1 / (@averages1[0][7]+@averages1[0][8]+@averages1[0][9]) * 100
          sheet.add_row ["Surface/Subsurface/Tile Drain Flow (in)", sprintf("%8.1f", @averages1[0][7]+@averages1[0][8]+@averages1[0][9]), sprintf("%8.1f",@cis1[0][8]+@cis1[0][9]+@cis1[0][10]), sprintf("%8.1f", @averages2[0][7]+@averages2[0][8]+@averages2[0][9]), sprintf("%8.1f",@cis2[0][8]+@cis2[0][9]+@cis2[0][10]), sprintf("%8.1f", difference1), sprintf("%8.1f", reduction1), "", "", "", ""], :types => [:string, :float, :float, :float, :float, :float, :float], :style => main_row
          sheet.add_row ["Surface Flow (in)", sprintf("%8.2f", @averages1[0][7]), sprintf("%8.1f", @cis1[0][8]), sprintf("%8.2f", @averages2[0][7]), sprintf("%8.1f", @cis2[0][8]), sprintf("%8.2f", @averages2[0][7]-@averages1[0][7]),sprintf("%8.2f", ((@averages2[0][7]-@averages1[0][7]) / @averages1[0][7]) * 100), "", ""], :types => [:string, :float, :float, :float, :float, :float, :float]
          sheet.add_row ["Subsurface Flow (in)", sprintf("%8.2f", @averages1[0][8]), sprintf("%8.1f", @cis1[0][9]), sprintf("%8.2f", @averages2[0][8]), sprintf("%8.1f", @cis2[0][9]), sprintf("%8.2f", @averages2[0][8]-@averages1[0][8]),sprintf("%8.2f", ((@averages2[0][8]-@averages1[0][8]) / @averages1[0][8]) * 100), "", ""], :types => [:string, :float, :float, :float, :float, :float, :float]
          sheet.add_row ["Tile Drain Flow (in)", sprintf("%8.2f", @averages1[0][9]), sprintf("%8.1f", @cis1[0][10]), sprintf("%8.2f", @averages2[0][9]), sprintf("%8.1f", @cis2[0][10]), sprintf("%8.2f", @averages2[0][9]-@averages1[0][9]),sprintf("%8.2f", ((@averages2[0][9]-@averages1[0][9]) / @averages1[0][9]) * 100), "", ""], :types => [:string, :float, :float, :float, :float, :float, :float]
        
          difference1 = @averages2[0][10]+@averages2[0][11]-(@averages1[0][10]+@averages1[0][11]) 
          reduction1 = difference1 / (@averages1[0][10]+@averages1[0][11]) * 100 
          sheet.add_row ["Total Other Water Info (in)", sprintf("%8.1f", @averages1[0][10]+@averages1[0][11]).to_s, sprintf("%8.1f",@cis1[0][11]+@cis1[0][12]), sprintf("%8.1f", @averages2[0][10]+@averages2[0][11]), sprintf("%8.1f",@cis2[0][11]+@cis2[0][12]), sprintf("%8.1f", difference1), sprintf("%8.1f", reduction1), "", "", "", ""], :types => [:string, :float, :float, :float, :float, :float, :float], :style => main_row
          sheet.add_row ["Irrigation Runoff (in)", sprintf("%8.2f", @averages1[0][10]).to_s, sprintf("%8.1f", @cis1[0][11]), sprintf("%8.2f", @averages2[0][10]), sprintf("%8.1f", @cis2[0][11]), sprintf("%8.2f", @averages2[0][10]-@averages1[0][10]), sprintf("%8.2f", ((@averages2[0][10]-@averages1[0][10]) / @averages1[0][10]) * 100), "", ""], :types => [:string, :float, :float, :float, :float, :float, :float]
          sheet.add_row ["Deep Percolation (in)", sprintf("%8.2f", @averages1[0][11]), sprintf("%8.1f", @cis1[0][12]), sprintf("%8.2f", @averages2[0][11]), sprintf("%8.1f",@cis2[0][12]), sprintf("%8.2f", @averages2[0][11]-@averages1[0][11]), sprintf("%8.2f", ((@averages2[0][11]-@averages1[0][11]) / @averages1[0][11]) * 100), "", ""], :types => [:string, :float, :float, :float, :float, :float, :float]
        
          difference1 = @averages2[0][12]+@averages2[0][13]-(@averages1[0][12]+@averages1[0][13])
          reduction1 = difference1 / (@averages1[0][12]+@averages1[0][13]) * 100
          sheet.add_row ["Total Sediment (t/ac)", sprintf("%8.1f", @averages1[0][12]+@averages1[0][13]), sprintf("%8.1f",@cis1[0][13]+@cis1[0][14]), sprintf("%8.1f", @averages2[0][12]+@averages2[0][13]), sprintf("%8.1f",@cis2[0][13]+@cis2[0][14]), sprintf("%8.1f", difference1), sprintf("%8.1f", reduction1), "", "", "", ""], :types => [:string, :float, :float, :float, :float, :float, :float], :style => main_row
          sheet.add_row ["Surface Erosion (t/ac)", sprintf("%8.4f", @averages1[0][12]), sprintf("%8.1f", @cis1[0][13]), sprintf("%8.4f", @averages2[0][12]), sprintf("%8.1f", @cis2[0][13]), sprintf("%8.4f", @averages2[0][12]-@averages1[0][12]), sprintf("%8.2f", ((@averages2[0][12]-@averages1[0][12]) / @averages1[0][12]) * 100), "", ""], :types => [:string, :float, :float, :float, :float, :float, :float]
          sheet.add_row ["Manure Erosion", sprintf("%8.4f", @averages1[0][13]), sprintf("%8.1f", @cis1[0][14]), sprintf("%8.4f", @averages2[0][13]), sprintf("%8.1f", @cis2[0][14]), sprintf("%8.4f", @averages2[0][13]-@averages1[0][13]), sprintf("%8.2f", ((@averages2[0][13]-@averages1[0][13]) / @averages1[0][13]) * 100), "", ""], :types => [:string, :float, :float, :float, :float, :float, :float]
        end
      else
        sheet.add_row ["Total N (lbs/ac)", sprintf("%8.1f", @averages1[0][0]+@averages1[0][1]+@averages1[0][2]+@averages1[0][3]), sprintf("%8.1f",@cis1[0][1]+@cis1[0][2]+@cis1[0][3]+@cis1[0][4]), "", "", "", "", "", "", "", ""], :types => [:string, :float, :float], :style => main_row
        sheet.add_row ["Org N (lbs/ac)", sprintf("%8.2f", @averages1[0][0]).to_s, sprintf("%8.1f", @cis1[0][1]), "", "", "", "", "", "", "", ""], :types => [:string, :float, :float]
        sheet.add_row ["Runoff N (lbs/ac)", sprintf("%8.2f", @averages1[0][1]).to_s, sprintf("%8.1f", @cis1[0][2]), "", "", "", "", "", "", "", ""], :types => [:string, :float, :float]
        sheet.add_row ["Subsurface N (lbs/ac)", sprintf("%8.2f", @averages1[0][2]).to_s, sprintf("%8.1f", @cis1[0][3]), "", "", "", "", "", "", "", ""], :types => [:string, :float, :float]
        sheet.add_row ["Tile Drain N (lbs/ac)", sprintf("%8.2f", @averages1[0][3]).to_s, sprintf("%8.1f", @cis1[0][4]), "", "", "", "", "", "", "", ""], :types => [:string, :float, :float]
        
        sheet.add_row ["Total P (lbs/ac)", sprintf("%8.1f", @averages1[0][4]+@averages1[0][5]+@averages1[0][6]), " (" + sprintf("%8.1f",@cis1[0][5]+@cis1[0][6]+@cis1[0][7]), "", "", "", "", "", "", "", ""], :types => [:string, :float, :float], :style => main_row
        sheet.add_row ["Org P (lbs/ac)", sprintf("%8.2f", @averages1[0][4]).to_s, sprintf("%8.1f", @cis1[0][5]) + ")", "", "", "", "", "", "", "", ""], :types => [:string, :float, :float]
        sheet.add_row ["PO4 (lbs/ac)", sprintf("%8.2f", @averages1[0][5]).to_s, sprintf("%8.1f", @cis1[0][6]) + ")", "", "", "", "", "", "", "", ""], :types => [:string, :float, :float]
        sheet.add_row ["Tile Drain P (lbs/ac)", sprintf("%8.2f", @averages1[0][6]).to_s, sprintf("%8.1f", @cis1[0][7]) + ")", "", "", "", "", "", "", "", ""], :types => [:string, :float, :float]
        
        sheet.add_row ["Surface/Subsurface/Tile Drain Flow (in)", sprintf("%8.1f", @averages1[0][7]+@averages1[0][8]+@averages1[0][9]), sprintf("%8.1f",@cis1[0][8]+@cis1[0][9]+@cis1[0][10]), "", "", "", "", "", "", "", ""], :types => [:string, :float, :float], :style => main_row
        sheet.add_row ["Surface Flow (in)", sprintf("%8.2f", @averages1[0][7]), sprintf("%8.1f", @cis1[0][8]) + ")", "", "", "", "", "", "", "", ""], :types => [:string, :float, :float]
        sheet.add_row ["Subsurface Flow (in)", sprintf("%8.2f", @averages1[0][8]), sprintf("%8.1f", @cis1[0][9]) + ")", "", "", "", "", "", "", "", ""], :types => [:string, :float, :float]
        sheet.add_row ["Tile Drain Flow (in)", sprintf("%8.2f", @averages1[0][9]), sprintf("%8.1f", @cis1[0][10]) + ")", "", "", "", "", "", "", "", ""], :types => [:string, :float, :float]
        
        sheet.add_row ["Total Other Water Info (in)", sprintf("%8.1f", @averages1[0][10]+@averages1[0][11]).to_s, sprintf("%8.1f",@cis1[0][11]+@cis1[0][12]), "", "", "", "", "", "", "", ""], :types => [:string, :float, :float], :style => main_row
        sheet.add_row ["Irrigation Runoff (in)", sprintf("%8.2f", @averages1[0][10]).to_s, sprintf("%8.1f", @cis1[0][11]), "", "", "", "", "", "", "", ""], :types => [:string, :float, :float]
        sheet.add_row ["Deep Percolation (in)", sprintf("%8.2f", @averages1[0][11]), sprintf("%8.1f", @cis1[0][12]), "", "", "", "", "", "", "", ""], :types => [:string, :float, :float]
        
        sheet.add_row ["Total Sediment (t/ac)", sprintf("%8.1f", @averages1[0][12]+@averages1[0][13]), sprintf("%8.1f",@cis1[0][13]+@cis1[0][14]), "", "", "", "", "", "", "", ""], :types => [:string, :float, :float], :style => main_row
        sheet.add_row ["Surface Erosion", sprintf("%8.4f", @averages1[0][12]), sprintf("%8.1f", @cis1[0][13]), "", "", "", "", "", "", "", ""], :types => [:string, :float, :float]
        sheet.add_row ["Manure Erosion", sprintf("%8.4f", @averages1[0][13]), sprintf("%8.1f", @cis1[0][14]), "", "", "", "", "", "", "", ""], :types => [:string, :float, :float]
      end
      sheet.add_row ["Crop Yield", "", "", "", "", "", "", "", "", "", ""], :types => :string, :style => main_row
      crop_results = Array.new
      crops1.each do |cr1|
        crop_result = Hash.new
        crop_result["name"] = cr1[5]
        crop_result["yield1"] = cr1[0]
        crop_result["ci1"] = cic1.assoc(cr1[5])[1]
        crop_result["ws1"] = cr1[1].round(0)
        crop_result["ns1"] = cr1[2].round(0)
        crop_result["ps1"] = cr1[3].round(0)
        crop_result["ts1"] = cr1[4].round(0)
        crop_result["yield2"] = 0
        crop_result["ci2"] = 0
        crop_result["ws2"] = 0
        crop_result["ns2"] = 0
        crop_result["ps2"] = 0
        crop_result["ts2"] = 0
        crop_result["yield3"] = 0
        crop_result["ci3"] = 0
        crop_result["ws3"] = 0
        crop_result["ns3"] = 0
        crop_result["ps3"] = 0
        crop_result["ts3"] = 0
        if @scenario2 != "0" && @scenario2 != ""
          crops2.each do |cr2|
            if cr2[5] == cr1[5]
              crop_result["yield2"] = cr2[0]
              crop_result["ci2"] = cic2.assoc(cr2[5])[1]
              crop_result["ws2"] = cr2[1].round(0)
              crop_result["ns2"] = cr2[2].round(0)
              crop_result["ps2"] = cr2[3].round(0)
              crop_result["ts2"] = cr2[4].round(0)
            end
          end
        end
        if @scenario3 != "0" && @scenario3 != ""
          crops3.each do |cr3|
            if cr3[5] == cr1[5] then
              crop_result["yield3"] = cr3[0]
              crop_result["ci3"] = cic3.assoc(cr3[5])[1]
              crop_result["ws3"] = cr3[1].round(0)
              crop_result["ns3"] = cr3[2].round(0)
              crop_result["ps3"] = cr3[3].round(0)
              crop_result["ts3"] = cr3[4].round(0)
            end
          end
        end
        crop_results.push(crop_result)
      end
      if @scenario2 != "0" && @scenario2 != ""
        crops2.each do |cr2|
          found = false
          crops1.each do |cr1|
            if cr2[5] == cr1[5]
              found = true
              break
            end
          end
          if found == false
            crop_result = Hash.new
            crop_result["name"] = cr2[5]
            crop_result["yield1"] = 0
            crop_result["ci1"] = 0
            crop_result["ws1"] = 0
            crop_result["ns1"] = 0
            crop_result["ps1"] = 0
            crop_result["ts1"] = 0
            crop_result["yield2"] = cr2[0]
            crop_result["ci2"] = cic2.assoc(cr2[5])[1]
            crop_result["ws2"] = cr2[1]
            crop_result["ns2"] = cr2[2]
            crop_result["ps2"] = cr2[3]
            crop_result["ts2"] = cr2[4]
            crop_result["yield3"] = 0
            crop_result["ci3"] = 0
            crop_result["ws3"] = 0
            crop_result["ns3"] = 0
            crop_result["ps3"] = 0
            crop_result["ts3"] = 0
            if @scenario3 != "0" && @scenario3 != ""
              crops3.each do |cr3|
                if cr3[5] == cr2[5] then
                  crop_result["yield3"] = cr3[0]
                  crop_result["ci3"] = cic3.assoc(cr3[5])[1]
                  crop_result["ws3"] = cr3[1]
                  crop_result["ns3"] = cr3[2]
                  crop_result["ps3"] = cr3[3]
                  crop_result["ts3"] = cr3[4]
                end
              end
            end
            crop_results.push(crop_result)
          end
        end
      end
      if @scenario3 != "0" && @scenario3 != ""
        crops3.each do |cr3|
          found = false
          crop_results.each do |cr|
            if cr3[5] == cr["name"] then
              found = true
              break
            end 
          end 
          if found == false then
            crop_result = Hash.new
            crop_result["name"] = cr3[5]
            crop_result["yield1"] = 0
            crop_result["ci1"] = 0
            crop_result["ws1"] = 0
            crop_result["ns1"] = 0
            crop_result["ps1"] = 0
            crop_result["ts1"] = 0
            crop_result["yield2"] = 0
            crop_result["ci2"] = 0
            crop_result["ws2"] = 0
            crop_result["ns2"] = 0
            crop_result["ps2"] = 0
            crop_result["ts2"] = 0
            crop_result["yield3"] = cr3[0]
            crop_result["ci3"] = cic3.assoc(cr3[5])[1]
            crop_result["ws3"] = cr3[1]
            crop_result["ns3"] = cr3[2]
            crop_result["ps3"] = cr3[3]
            crop_result["ts3"] = cr3[4]
            crop_results.push(crop_result)
          end
        end
      end
      crop_results.each do |cr|
        crop = Crop.find_by_code(cr["name"]) 
        conversion_factor = 1 * AC_TO_HA 
        dry_matter = 100 
        unit = "t/ac"
        if crop != nil
          conversion_factor = crop.conversion_factor * AC_TO_HA 
          dry_matter = crop.dry_matter 
          unit = crop.yield_unit + "/ac"
        end
        prec = ""
        if unit == "t/ac"
          prec = "%8.2f"
        else
          prec = "%8.0f"
        end

        if @scenario2 != "0" && @scenario2 != ""
          if @scenario3 != "0" && @scenario3 != ""
            sheet.add_row [crop.name+" ("+unit+")", sprintf(prec, cr["yield1"] * conversion_factor / (dry_matter/100)), sprintf("%8.1f", cr["ci1"]), sprintf(prec, cr["yield2"] * conversion_factor / (dry_matter/100)), sprintf("%8.1f", cr["ci2"]), sprintf("%8.0f", (cr["yield2"]-cr["yield1"])* conversion_factor / (dry_matter/100)), ((sprintf("%8.1f", (cr["yield2"]-cr["yield1"]) * 100 / cr["yield1"])) unless cr["yield1"]==0), sprintf(prec, cr["yield3"] * conversion_factor / (dry_matter/100)), sprintf("%8.1f", cr["ci3"]), sprintf("%8.0f", (cr["yield3"]-cr["yield1"])* conversion_factor / (dry_matter/100)), (((sprintf("%8.1f", (cr["yield3"]-cr["yield1"])*100 / cr["yield1"]))) unless cr["yield1"]==0)], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float]
          else
            sheet.add_row [crop.name+" ("+unit+")", sprintf(prec, cr["yield1"] * conversion_factor / (dry_matter/100)), sprintf("%8.1f", cr["ci1"]), sprintf(prec, cr["yield2"] * conversion_factor / (dry_matter/100)), sprintf("%8.1f", cr["ci2"]), sprintf("%8.0f", (cr["yield2"]-cr["yield1"])* conversion_factor / (dry_matter/100)), ((sprintf("%8.1f", (cr["yield2"]-cr["yield1"]) * 100 / cr["yield1"])) unless cr["yield1"]==0), "", "", "", ""], :types => [:string, :float, :float, :float, :float, :float, :float]
          end
        else
          sheet.add_row [crop.name+" ("+unit+")", sprintf(prec, cr["yield1"] * conversion_factor / (dry_matter/100)), sprintf("%8.1f", cr["ci1"]), "", "", "", ""], :types => [:string, :float, :float] 
        end
      end
      if ENV["APP_VERSION"] == "standard" && crop_results.count > 0
        sheet.add_row ["N Stress",  "", "", "", "", "", "", "", "", "", ""], :types => :string, :style => main_row
        crop_results.each do |cr|
          crop = Crop.find_by_code(cr["name"])
          if @scenario2 != "" && @scenario2 != "0"
            if @scenario3 != "" && @scenario3 != "0"
              sheet.add_row [crop.name + " (days)", sprintf("%8.0f", cr["ns1"]), sprintf("%8.1f", cr["ns1"]*100.0/crop.dyam), sprintf("%8.0f", cr["ns2"]), sprintf("%8.1f", (cr["ns2"] * 100.0 / crop.dyam).round(1)), (((sprintf("%8.0f", cr["ns2"]-cr["ns1"]))) unless cr["ns1"]==0), (((sprintf("%8.1f", (cr["ns2"]-cr["ns1"])*100 / cr["ns1"]))) unless cr["ns1"]==0), sprintf("%8.0f", cr["ns3"]), sprintf("%8.1f", cr["ns3"] * 100.0 / crop.dyam.round(1)), (((sprintf("%8.0f", cr["ns3"]-cr["ns1"]))) unless cr["ns1"]==0), (((sprintf("%8.1f", (cr["ns3"]-cr["ns1"]) *100/ cr["ns1"]))) unless cr["ns1"]==0)], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float] 
            else
              sheet.add_row [crop.name + " (days)", sprintf("%8.0f", cr["ns1"]), sprintf("%8.1f", cr["ns1"]*100.0/crop.dyam), sprintf("%8.0f", cr["ns2"]), sprintf("%8.1f", (cr["ns2"] * 100.0 / crop.dyam).round(1)), (((sprintf("%8.0f", cr["ns2"]-cr["ns1"]))) unless cr["ns1"]==0), (((sprintf("%8.1f", (cr["ns2"]-cr["ns1"])*100 / cr["ns1"]))) unless cr["ns1"]==0), "", ""], :types => [:string, :float, :float, :float, :float, :float, :float]
            end
          else
            sheet.add_row [crop.name + " (days)", sprintf("%8.0f", cr["ns1"]), sprintf("%8.1f", cr["ns1"]*100.0/crop.dyam), "", "", ""], :types => [:string, :float, :float]    
          end
        end
        sheet.add_row ["P Stress", "", "", "", "", "", "", "", "", "", ""], :types => :string, :style => main_row
        crop_results.each do |cr|
          crop = Crop.find_by_code(cr["name"])
          if @scenario2 != "" && @scenario2 != "0"
            if @scenario3 != "" && @scenario3 != "0"
              sheet.add_row [crop.name + " (days)", sprintf("%8.0f", cr["ps1"]), sprintf("%8.1f", cr["ps1"]*100.0/crop.dyam), sprintf("%8.0f", cr["ps2"]), sprintf("%8.1f", (cr["ps2"] * 100.0 / crop.dyam).round(1)), (((sprintf("%8.2f", cr["ps2"]-cr["ps1"]))) unless cr["ps1"]==0), (((sprintf('%8.2f', (cr['ps2']-cr['ps1']) *100/ cr['ps1']))) unless cr['ps1']==0), sprintf("%8.0f", cr["ps3"]), sprintf("%8.1f", cr["ps3"] * 100.0 / crop.dyam.round(1)), (((sprintf("%8.2f", cr["ps3"]-cr["ps1"]))) unless cr["ps1"]==0), (((sprintf("%8.2f", (cr["ps3"]-cr["ps1"]) *100/ cr["ps1"]))) unless cr["ps1"]==0)], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float]
            else
              sheet.add_row [crop.name + " (days)", sprintf("%8.0f", cr["ps1"]), sprintf("%8.1f", cr["ps1"]*100.0/crop.dyam), sprintf("%8.0f", cr["ps2"]), sprintf("%8.1f", (cr["ps2"] * 100.0 / crop.dyam).round(1)), (((sprintf("%8.2f", cr["ps2"]-cr["ps1"]))) unless cr["ps1"]==0), (((sprintf('%8.2f', (cr['ps2']-cr['ps1']) *100/ cr['ps1']))) unless cr['ps1']==0), "", ""], :types => [:string, :float, :float, :float, :float, :float, :float]
            end
          else
            sheet.add_row [crop.name + " (days)", sprintf("%8.0f", cr["ps1"]), sprintf("%8.1f", cr["ps1"]*100.0/crop.dyam), "", "", "", "", "", "", "", ""], :types => [:string, :float, :float] 
          end
        end
        sheet.add_row ["Temperature Stress", "", "", "", "", "", "", "", "", "", ""], :types => :string, :style => main_row
        crop_results.each do |cr|
          crop = Crop.find_by_code(cr["name"])
          if @scenario2 != "" && @scenario2 != "0"
            if @scenario3 != "" && @scenario3 != "0"
              sheet.add_row [crop.name + " (days)", sprintf("%8.0f", cr["ts1"]), sprintf("%8.1f", cr["ts1"]*100.0/crop.dyam), sprintf("%8.0f", cr["ts2"]), sprintf("%8.1f", (cr["ts2"] * 100.0 / crop.dyam).round(1)), (((sprintf("%8.2f", cr["ts2"]-cr["ts1"]))) unless cr["ts1"]==0), (((sprintf("%8.2f", (cr["ts2"]-cr["ts1"]) *100/ cr["ts1"]))) unless cr["ts1"]==0 ), sprintf("%8.0f", cr["ts3"]), sprintf("%8.1f", cr["ts3"] * 100.0 / crop.dyam.round(1)), (((sprintf("%8.2f", cr["ts3"]-cr["ts1"]))) unless cr["ts1"]==0), (((sprintf("%8.2f", (cr["ts3"]-cr["ts1"]) *100/ cr["ts1"]))) unless cr["ts1"]==0)], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float] 
            else
              sheet.add_row [crop.name + " (days)", sprintf("%8.0f", cr["ts1"]), sprintf("%8.1f", cr["ts1"]*100.0/crop.dyam), sprintf("%8.0f", cr["ts2"]), sprintf("%8.1f", (cr["ts2"] * 100.0 / crop.dyam).round(1)), (((sprintf("%8.2f", cr["ts2"]-cr["ts1"]))) unless cr["ts1"]==0), (((sprintf("%8.2f", (cr["ts2"]-cr["ts1"]) *100/ cr["ts1"]))) unless cr["ts1"]==0 ), "", ""], :types => [:string, :float, :float, :float, :float, :float, :float]
            end
          else
            sheet.add_row [crop.name + " (days)", sprintf("%8.0f", cr["ts1"]), sprintf("%8.1f", cr["ts1"]*100.0/crop.dyam), "", "", "", "", "", "", "", ""], :types => [:string, :float, :float] 
          end 
        end
        sheet.add_row ["Water Stress",  "", "", "", "", "", "", "", "", "", ""], :types => :string, :style => main_row
        crop_results.each do |cr|
          crop = Crop.find_by_code(cr["name"])
          if @scenario2 != "" && @scenario2 != "0"
            if @scenario3 != "" && @scenario3 != "0"
              sheet.add_row [crop.name + " (days)", sprintf("%8.0f", cr["ws1"]), sprintf("%8.1f", cr["ws1"]*100.0/crop.dyam), sprintf("%8.0f", cr["ws2"]), sprintf("%8.1f", (cr["ws2"] * 100.0 / crop.dyam).round(1)), (((sprintf("%8.2f", cr["ws2"]-cr["ws1"]))) unless cr["ws1"]==0), (((sprintf("%8.2f", (cr["ws2"]-cr["ws1"]) *100/ cr["ws1"]))) unless cr["ws1"]==0), sprintf("%8.0f", cr["ws3"]), sprintf("%8.1f", cr["ws3"] * 100.0 / crop.dyam.round(1)), (((sprintf("%8.2f", cr["ws3"]-cr["ws1"]))) unless cr["ws1"]==0), (((sprintf("%8.2f", (cr["ws3"]-cr["ws1"]) *100/ cr["ws1"]))) unless cr["ws1"]==0)], :types => [:string, :float, :float, :float, :float, :float, :float, :float, :float, :float, :float]   
            else
              sheet.add_row [crop.name + " (days)", sprintf("%8.0f", cr["ws1"]), sprintf("%8.1f", cr["ws1"]*100.0/crop.dyam), sprintf("%8.0f", cr["ws2"]), sprintf("%8.1f", (cr["ws2"] * 100.0 / crop.dyam).round(1)), (((sprintf("%8.2f", cr["ws2"]-cr["ws1"]))) unless cr["ws1"]==0), (((sprintf("%8.2f", (cr["ws2"]-cr["ws1"]) *100/ cr["ws1"]))) unless cr["ws1"]==0), "", ""], :types => [:string, :float, :float, :float, :float, :float, :float] 
            end
          else
            sheet.add_row [crop.name + " (days)", sprintf("%8.0f", cr["ws1"]), sprintf("%8.1f", cr["ws1"]*100.0/crop.dyam), "", "", "", "", "", "", "", ""], :types => [:string, :float, :float]     
          end
        end
      end
    end #end scenario != "0"
    sheet.column_widths nil
  end
end
